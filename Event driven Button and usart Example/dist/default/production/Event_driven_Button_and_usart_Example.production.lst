

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Jun 10 01:19:42 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 2.05
    64                           ; Generated 20/12/2018 GMT
    65                           ; 
    66                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4520 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98 ;; Function _USARTReadByte is unused but had its address taken
    99  0000                     
   100                           	psect	nvBANK0
   101  0000E3                     __pnvBANK0:
   102                           	opt callstack 0
   103  0000E3                     _applicationUsart:
   104                           	opt callstack 0
   105  0000E3                     	ds	2
   106  0000                     _SPBRG	set	4015
   107  0000                     _TXREG	set	4013
   108  0000                     _RCREG	set	4014
   109  0000                     _PIR1bits	set	3998
   110  0000                     _TRISD	set	3989
   111  0000                     _TRISB	set	3987
   112  0000                     _OSCCON	set	4051
   113  0000                     _LATB	set	3978
   114  0000                     _PORTD	set	3971
   115  0000                     _CREN	set	32092
   116  0000                     _TXEN	set	32101
   117  0000                     _TRISC7	set	31911
   118  0000                     _TRISC6	set	31910
   119  0000                     _SPEN	set	32095
   120  0000                     _SYNC	set	32100
   121  0000                     _BRGH	set	32098
   122  0000                     _RCIE	set	31981
   123  0000                     _PEIE	set	32662
   124  0000                     _GIE	set	32663
   125  0000                     _TXIF	set	31988
   126  0000                     _RCIF	set	31989
   127                           
   128                           	psect	smallconst
   129  000600                     __psmallconst:
   130                           	opt callstack 0
   131  000600  00                 	db	0
   132  000601                     STR_3:
   133  000601  0D                 	db	13
   134  000602  0A                 	db	10
   135  000603  00                 	db	0
   136  0000                     
   137                           ; #config settings
   138  000604  00                 	db	0	; dummy byte at the end
   139  0000                     
   140                           	psect	cinit
   141  001452                     __pcinit:
   142                           	opt callstack 0
   143  001452                     start_initialization:
   144                           	opt callstack 0
   145  001452                     __initialization:
   146                           	opt callstack 0
   147                           
   148                           ; Clear objects allocated to BANK0 (21 bytes)
   149  001452  EE00  F0CE         	lfsr	0,__pbssBANK0
   150  001456  0E15               	movlw	21
   151  001458                     clear_0:
   152  001458  6AEE               	clrf	postinc0,c
   153  00145A  06E8               	decf	wreg,f,c
   154  00145C  E1FD               	bnz	clear_0
   155                           
   156                           ; Clear objects allocated to COMRAM (20 bytes)
   157  00145E  EE00  F049         	lfsr	0,__pbssCOMRAM
   158  001462  0E14               	movlw	20
   159  001464                     clear_1:
   160  001464  6AEE               	clrf	postinc0,c
   161  001466  06E8               	decf	wreg,f,c
   162  001468  E1FD               	bnz	clear_1
   163  00146A                     end_of_initialization:
   164                           	opt callstack 0
   165  00146A                     __end_of__initialization:
   166                           	opt callstack 0
   167  00146A  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  00146C  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00146E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  001470  6EF8               	movwf	tblptru,c
   171  001472  0100               	movlb	0
   172  001474  EF91  F00A         	goto	_main	;jump to C main() function
   173                           
   174                           	psect	bssCOMRAM
   175  000049                     __pbssCOMRAM:
   176                           	opt callstack 0
   177  000049                     usartOccured@F2933:
   178                           	opt callstack 0
   179  000049                     	ds	20
   180                           
   181                           	psect	bssBANK0
   182  0000CE                     __pbssBANK0:
   183                           	opt callstack 0
   184  0000CE                     USARTWriteInt@F2935:
   185                           	opt callstack 0
   186  0000CE                     	ds	5
   187  0000D3                     _controller:
   188                           	opt callstack 0
   189  0000D3                     	ds	16
   190                           
   191                           	psect	cstackBANK0
   192  000080                     __pcstackBANK0:
   193                           	opt callstack 0
   194  000080                     ?_getThBit:
   195                           	opt callstack 0
   196  000080                     ?___wmul:
   197                           	opt callstack 0
   198  000080                     ?___awdiv:
   199                           	opt callstack 0
   200  000080                     ?___awmod:
   201                           	opt callstack 0
   202  000080                     ?___aldiv:
   203                           	opt callstack 0
   204  000080                     ?_Button_initButton:
   205                           	opt callstack 0
   206  000080                     ?_getUsart:
   207                           	opt callstack 0
   208  000080                     getThBit@connectedBit:
   209                           	opt callstack 0
   210  000080                     USARTWriteByte@ch:
   211                           	opt callstack 0
   212  000080                     Button_initButton@portName:
   213                           	opt callstack 0
   214  000080                     setupFunctions@usart:
   215                           	opt callstack 0
   216  000080                     setUsart@usart:
   217                           	opt callstack 0
   218  000080                     ___wmul@multiplier:
   219                           	opt callstack 0
   220  000080                     ___awdiv@dividend:
   221                           	opt callstack 0
   222  000080                     ___awmod@dividend:
   223                           	opt callstack 0
   224  000080                     ___aldiv@dividend:
   225                           	opt callstack 0
   226                           
   227                           ; 4 bytes @ 0x0
   228  000080                     	ds	2
   229  000082                     ??_getThBit:
   230  000082                     Button_initButton@pin:
   231                           	opt callstack 0
   232  000082                     ___wmul@multiplicand:
   233                           	opt callstack 0
   234  000082                     ___awdiv@divisor:
   235                           	opt callstack 0
   236  000082                     ___awmod@divisor:
   237                           	opt callstack 0
   238                           
   239                           ; 2 bytes @ 0x2
   240  000082                     	ds	1
   241  000083                     Button_initButton@onPressed:
   242                           	opt callstack 0
   243                           
   244                           ; 2 bytes @ 0x3
   245  000083                     	ds	1
   246  000084                     getThBit@port:
   247                           	opt callstack 0
   248  000084                     ___awdiv@counter:
   249                           	opt callstack 0
   250  000084                     ___awmod@counter:
   251                           	opt callstack 0
   252  000084                     ___wmul@product:
   253                           	opt callstack 0
   254  000084                     ___aldiv@divisor:
   255                           	opt callstack 0
   256                           
   257                           ; 4 bytes @ 0x4
   258  000084                     	ds	1
   259  000085                     ?_Button_getValue:
   260                           	opt callstack 0
   261  000085                     ___awdiv@sign:
   262                           	opt callstack 0
   263  000085                     ___awmod@sign:
   264                           	opt callstack 0
   265  000085                     Button_getValue@button:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0x5
   269  000085                     	ds	1
   270  000086                     addButton@controller:
   271                           	opt callstack 0
   272  000086                     ___awdiv@quotient:
   273                           	opt callstack 0
   274                           
   275                           ; 2 bytes @ 0x6
   276  000086                     	ds	1
   277  000087                     ??_Button_getValue:
   278  000087                     Button_initButton@buton:
   279                           	opt callstack 0
   280                           
   281                           ; 7 bytes @ 0x7
   282  000087                     	ds	1
   283  000088                     ___aldiv@counter:
   284                           	opt callstack 0
   285  000088                     addButton@button:
   286                           	opt callstack 0
   287                           
   288                           ; 2 bytes @ 0x8
   289  000088                     	ds	1
   290  000089                     ___aldiv@sign:
   291                           	opt callstack 0
   292                           
   293                           ; 1 bytes @ 0x9
   294  000089                     	ds	1
   295  00008A                     ??_addButton:
   296  00008A                     Button_getValue@value:
   297                           	opt callstack 0
   298  00008A                     ___aldiv@quotient:
   299                           	opt callstack 0
   300                           
   301                           ; 4 bytes @ 0xA
   302  00008A                     	ds	4
   303  00008E                     ?_calculateSpbrg:
   304                           	opt callstack 0
   305  00008E                     ?_initInputController:
   306                           	opt callstack 0
   307  00008E                     calculateSpbrg@baudRate:
   308                           	opt callstack 0
   309                           
   310                           ; 4 bytes @ 0xE
   311  00008E                     	ds	4
   312  000092                     ??_calculateSpbrg:
   313  000092                     setProcessor@_processor:
   314                           	opt callstack 0
   315  000092                     USARTWriteString@str:
   316                           	opt callstack 0
   317  000092                     USARTWriteInt@val:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x12
   321  000092                     	ds	2
   322  000094                     USARTWriteInt@field_length:
   323                           	opt callstack 0
   324  000094                     USARTWriteLine@ln:
   325                           	opt callstack 0
   326  000094                     setProcessor@us:
   327                           	opt callstack 0
   328                           
   329                           ; 18 bytes @ 0x14
   330  000094                     	ds	1
   331  000095                     USARTWriteInt@str:
   332                           	opt callstack 0
   333                           
   334                           ; 5 bytes @ 0x15
   335  000095                     	ds	1
   336  000096                     calculateSpbrg@bolum:
   337                           	opt callstack 0
   338                           
   339                           ; 4 bytes @ 0x16
   340  000096                     	ds	4
   341  00009A                     USARTWriteInt@j:
   342                           	opt callstack 0
   343  00009A                     USARTInit@usart:
   344                           	opt callstack 0
   345                           
   346                           ; 2 bytes @ 0x1A
   347  00009A                     	ds	2
   348  00009C                     USARTWriteInt@i:
   349                           	opt callstack 0
   350  00009C                     USARTInit@baudRate:
   351                           	opt callstack 0
   352                           
   353                           ; 4 bytes @ 0x1C
   354  00009C                     	ds	2
   355  00009E                     initInputController@button1:
   356                           	opt callstack 0
   357                           
   358                           ; 7 bytes @ 0x1E
   359  00009E                     	ds	2
   360  0000A0                     handleButtonEvents@buton:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x20
   364  0000A0                     	ds	2
   365  0000A2                     
   366                           ; 1 bytes @ 0x22
   367  0000A2                     	ds	2
   368  0000A4                     InputController_checkButtons@controller:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x24
   372  0000A4                     	ds	1
   373  0000A5                     initInputController@button2:
   374                           	opt callstack 0
   375                           
   376                           ; 7 bytes @ 0x25
   377  0000A5                     	ds	1
   378  0000A6                     ??_InputController_checkButtons:
   379                           
   380                           ; 1 bytes @ 0x26
   381  0000A6                     	ds	3
   382  0000A9                     InputController_checkButtons@i:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x29
   386  0000A9                     	ds	2
   387  0000AB                     InputController_checkButtons@buton:
   388                           	opt callstack 0
   389                           
   390                           ; 7 bytes @ 0x2B
   391  0000AB                     	ds	1
   392  0000AC                     initInputController@controller:
   393                           	opt callstack 0
   394                           
   395                           ; 16 bytes @ 0x2C
   396  0000AC                     	ds	6
   397  0000B2                     
   398                           ; 1 bytes @ 0x32
   399  0000B2                     	ds	10
   400  0000BC                     Application_setup@usart:
   401                           	opt callstack 0
   402                           
   403                           ; 18 bytes @ 0x3C
   404  0000BC                     	ds	18
   405  0000CE                     
   406                           ; 1 bytes @ 0x4E
   407                           
   408                           	psect	cstackCOMRAM
   409  000001                     __pcstackCOMRAM:
   410                           	opt callstack 0
   411  000001                     ?_isspace:
   412                           	opt callstack 0
   413  000001                     ?_isdigit:
   414                           	opt callstack 0
   415  000001                     ?_USARTDataReady:
   416                           	opt callstack 0
   417  000001                     ?i2___awdiv:
   418                           	opt callstack 0
   419  000001                     ?i2___awmod:
   420                           	opt callstack 0
   421  000001                     ?i2___wmul:
   422                           	opt callstack 0
   423  000001                     ?i2_getUsart:
   424                           	opt callstack 0
   425  000001                     i2USARTWriteByte@ch:
   426                           	opt callstack 0
   427  000001                     isdigit@c:
   428                           	opt callstack 0
   429  000001                     isspace@c:
   430                           	opt callstack 0
   431  000001                     i2USARTWriteString@str:
   432                           	opt callstack 0
   433  000001                     i2___awdiv@dividend:
   434                           	opt callstack 0
   435  000001                     i2___awmod@dividend:
   436                           	opt callstack 0
   437  000001                     i2___wmul@multiplier:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x0
   441  000001                     	ds	2
   442  000003                     ??_isspace:
   443  000003                     ??_isdigit:
   444  000003                     ??_USARTDataReady:
   445  000003                     i2USARTWriteLine@ln:
   446                           	opt callstack 0
   447  000003                     i2___awdiv@divisor:
   448                           	opt callstack 0
   449  000003                     i2___awmod@divisor:
   450                           	opt callstack 0
   451  000003                     i2___wmul@multiplicand:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x2
   455  000003                     	ds	1
   456  000004                     
   457                           ; 1 bytes @ 0x3
   458  000004                     	ds	1
   459  000005                     i2___awdiv@counter:
   460                           	opt callstack 0
   461  000005                     i2___awmod@counter:
   462                           	opt callstack 0
   463  000005                     i2___wmul@product:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x4
   467  000005                     	ds	1
   468  000006                     i2___awdiv@sign:
   469                           	opt callstack 0
   470  000006                     i2___awmod@sign:
   471                           	opt callstack 0
   472                           
   473                           ; 1 bytes @ 0x5
   474  000006                     	ds	1
   475  000007                     _isspace$1060:
   476                           	opt callstack 0
   477  000007                     i2___awdiv@quotient:
   478                           	opt callstack 0
   479                           
   480                           ; 2 bytes @ 0x6
   481  000007                     	ds	1
   482  000008                     ?_atoi:
   483                           	opt callstack 0
   484  000008                     atoi@s:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x7
   488  000008                     	ds	1
   489  000009                     i2USARTWriteInt@val:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x8
   493  000009                     	ds	1
   494  00000A                     ??_atoi:
   495                           
   496                           ; 1 bytes @ 0x9
   497  00000A                     	ds	1
   498  00000B                     i2USARTWriteInt@field_length:
   499                           	opt callstack 0
   500                           
   501                           ; 1 bytes @ 0xA
   502  00000B                     	ds	1
   503  00000C                     i2USARTWriteInt@str:
   504                           	opt callstack 0
   505                           
   506                           ; 5 bytes @ 0xB
   507  00000C                     	ds	2
   508  00000E                     atoi@neg:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0xD
   512  00000E                     	ds	2
   513  000010                     _atoi$1042:
   514                           	opt callstack 0
   515                           
   516                           ; 2 bytes @ 0xF
   517  000010                     	ds	1
   518  000011                     i2USARTWriteInt@j:
   519                           	opt callstack 0
   520                           
   521                           ; 2 bytes @ 0x10
   522  000011                     	ds	1
   523  000012                     _atoi$1044:
   524                           	opt callstack 0
   525                           
   526                           ; 2 bytes @ 0x11
   527  000012                     	ds	1
   528  000013                     USARTReadString@buf:
   529                           	opt callstack 0
   530  000013                     i2USARTWriteInt@i:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x12
   534  000013                     	ds	1
   535  000014                     _atoi$1043:
   536                           	opt callstack 0
   537                           
   538                           ; 1 bytes @ 0x13
   539  000014                     	ds	1
   540  000015                     USARTReadString@max_length:
   541                           	opt callstack 0
   542  000015                     atoi@n:
   543                           	opt callstack 0
   544                           
   545                           ; 2 bytes @ 0x14
   546  000015                     	ds	2
   547  000017                     ??_USARTReadString:
   548                           
   549                           ; 1 bytes @ 0x16
   550  000017                     	ds	5
   551  00001C                     USARTReadString@i:
   552                           	opt callstack 0
   553                           
   554                           ; 2 bytes @ 0x1B
   555  00001C                     	ds	2
   556  00001E                     USARTReadString@tmp:
   557                           	opt callstack 0
   558                           
   559                           ; 1 bytes @ 0x1D
   560  00001E                     	ds	1
   561  00001F                     
   562                           ; 1 bytes @ 0x1E
   563  00001F                     	ds	2
   564  000021                     usartOccured@text:
   565                           	opt callstack 0
   566                           
   567                           ; 20 bytes @ 0x20
   568  000021                     	ds	20
   569  000035                     usartOccured@i:
   570                           	opt callstack 0
   571                           
   572                           ; 2 bytes @ 0x34
   573  000035                     	ds	2
   574  000037                     ??_ISR:
   575                           
   576                           ; 1 bytes @ 0x36
   577  000037                     	ds	16
   578  000047                     _ISR$1361:
   579                           	opt callstack 0
   580                           
   581                           ; 2 bytes @ 0x46
   582  000047                     	ds	2
   583                           
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   586 ;;
   587 ;; *************** function _main *****************
   588 ;; Defined at:
   589 ;;		line 13 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   603 ;;      Params:         0       0       0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels required when called:   11
   609 ;; This function calls:
   610 ;;		_Application_loop
   611 ;;		_Application_setup
   612 ;;		_setPortInputsOutputs
   613 ;;		_setupSettings
   614 ;; This function is called by:
   615 ;;		Startup code after reset
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text0
   620  001522                     __ptext0:
   621                           	opt callstack 0
   622  001522                     _main:
   623                           	opt callstack 20
   624                           
   625                           ;main.c: 14:     setupSettings();
   626                           
   627                           ;incstack = 0
   628  001522  ECD4  F00A         	call	_setupSettings	;wreg free
   629                           
   630                           ;main.c: 15:     setPortInputsOutputs();
   631  001526  ECC6  F00A         	call	_setPortInputsOutputs	;wreg free
   632                           
   633                           ;main.c: 17:     LATB = 0x01;
   634  00152A  0E01               	movlw	1
   635  00152C  6E8A               	movwf	3978,c	;volatile
   636                           
   637                           ;main.c: 21:     Application_setup();
   638  00152E  EC80  F009         	call	_Application_setup	;wreg free
   639  001532                     l2262:
   640                           
   641                           ;main.c: 26:         Application_loop();
   642  001532  ECB0  F00A         	call	_Application_loop	;wreg free
   643  001536  D7FD               	goto	l2262
   644  001538                     __end_of_main:
   645                           	opt callstack 0
   646                           
   647 ;; *************** function _setupSettings *****************
   648 ;; Defined at:
   649 ;;		line 15 in file "./Settings.h"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, status,2
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   663 ;;      Params:         0       0       0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0
   666 ;;      Totals:         0       0       0       0       0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; Hardware stack levels required when called:    5
   670 ;; This function calls:
   671 ;;		Nothing
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           	psect	text1
   678  0015A8                     __ptext1:
   679                           	opt callstack 0
   680  0015A8                     _setupSettings:
   681                           	opt callstack 25
   682                           
   683                           ;./Settings.h: 16:     OSCCON = 0x72;
   684                           
   685                           ;incstack = 0
   686  0015A8  0E72               	movlw	114
   687  0015AA  6ED3               	movwf	4051,c	;volatile
   688  0015AC  0012               	return		;funcret
   689  0015AE                     __end_of_setupSettings:
   690                           	opt callstack 0
   691                           
   692 ;; *************** function _setPortInputsOutputs *****************
   693 ;; Defined at:
   694 ;;		line 20 in file "./Settings.h"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   708 ;;      Params:         0       0       0       0       0       0       0
   709 ;;      Locals:         0       0       0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0
   711 ;;      Totals:         0       0       0       0       0       0       0
   712 ;;Total ram usage:        0 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    5
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text2
   723  00158C                     __ptext2:
   724                           	opt callstack 0
   725  00158C                     _setPortInputsOutputs:
   726                           	opt callstack 25
   727                           
   728                           ;./Settings.h: 21:     TRISB = 0x00;
   729                           
   730                           ;incstack = 0
   731  00158C  0E00               	movlw	0
   732  00158E  6E93               	movwf	3987,c	;volatile
   733                           
   734                           ;./Settings.h: 23:     TRISD = 0x03;
   735  001590  0E03               	movlw	3
   736  001592  6E95               	movwf	3989,c	;volatile
   737  001594  0012               	return		;funcret
   738  001596                     __end_of_setPortInputsOutputs:
   739                           	opt callstack 0
   740                           
   741 ;; *************** function _Application_setup *****************
   742 ;; Defined at:
   743 ;;		line 27 in file "Application/Application.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  usart          18   60[BANK0 ] struct .
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   757 ;;      Params:         0       0       0       0       0       0       0
   758 ;;      Locals:         0      18       0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0
   760 ;;      Totals:         0      18       0       0       0       0       0
   761 ;;Total ram usage:       18 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    8
   764 ;; This function calls:
   765 ;;		_USARTInit
   766 ;;		_initInputController
   767 ;;		_setProcessor
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text3
   774  001300                     __ptext3:
   775                           	opt callstack 0
   776  001300                     _Application_setup:
   777                           	opt callstack 22
   778                           
   779                           ;Application/Application.c: 29:     Usart usart;;Application/Application.c: 30:     USAR
      +                          TInit(&usart, 9600);
   780                           
   781                           ;incstack = 0
   782  001300  0EBC               	movlw	low Application_setup@usart
   783  001302  0100               	movlb	0	; () banked
   784  001304  6F9A               	movwf	USARTInit@usart& (0+255),b
   785  001306  0E00               	movlw	high Application_setup@usart
   786  001308  6F9B               	movwf	(USARTInit@usart+1)& (0+255),b
   787  00130A  0E80               	movlw	128
   788  00130C  6F9C               	movwf	USARTInit@baudRate& (0+255),b
   789  00130E  0E25               	movlw	37
   790  001310  6F9D               	movwf	(USARTInit@baudRate+1)& (0+255),b
   791  001312  0E00               	movlw	0
   792  001314  6F9E               	movwf	(USARTInit@baudRate+2)& (0+255),b
   793  001316  0E00               	movlw	0
   794  001318  6F9F               	movwf	(USARTInit@baudRate+3)& (0+255),b
   795  00131A  EC1C  F009         	call	_USARTInit	;wreg free
   796                           
   797                           ;Application/Application.c: 33:     setProcessor();
   798  00131E  EC6D  F00A         	call	_setProcessor	;wreg free
   799                           
   800                           ;Application/Application.c: 34:     controller = initInputController();
   801  001322  EC7F  F006         	call	_initInputController	;wreg free
   802  001326  EE20  F0D3         	lfsr	2,_controller
   803  00132A  0E0F               	movlw	15
   804  00132C                     u2031:
   805  00132C  CFEB FFDB          	movff	plusw0,plusw2
   806  001330  06E8               	decf	wreg,f,c
   807  001332  E2FC               	bc	u2031
   808  001334  0012               	return		;funcret
   809  001336                     __end_of_Application_setup:
   810                           	opt callstack 0
   811                           
   812 ;; *************** function _setProcessor *****************
   813 ;; Defined at:
   814 ;;		line 11 in file "Application/Application.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  us             18   20[BANK0 ] struct .
   819 ;;  _processor      2   18[BANK0 ] struct .
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   829 ;;      Params:         0       0       0       0       0       0       0
   830 ;;      Locals:         0      20       0       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0       0       0
   832 ;;      Totals:         0      20       0       0       0       0       0
   833 ;;Total ram usage:       20 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    6
   836 ;; This function calls:
   837 ;;		_getUsart
   838 ;; This function is called by:
   839 ;;		_Application_setup
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text4
   844  0014DA                     __ptext4:
   845                           	opt callstack 0
   846  0014DA                     _setProcessor:
   847                           	opt callstack 23
   848                           
   849                           ;Application/Application.c: 12:     UsartDataProcessor _processor;;Application/Applicati
      +                          on.c: 13:     _processor.process = usartOccured;
   850                           
   851                           ;incstack = 0
   852  0014DA  0EEA               	movlw	low _usartOccured
   853  0014DC  0100               	movlb	0	; () banked
   854  0014DE  6F92               	movwf	setProcessor@_processor& (0+255),b
   855  0014E0  0E0A               	movlw	high _usartOccured
   856  0014E2  6F93               	movwf	(setProcessor@_processor+1)& (0+255),b
   857                           
   858                           ; BSR set to: 0
   859  0014E4  EC79  F00A         	call	_getUsart	;wreg free
   860                           
   861                           ;Application/Application.c: 15:     us.processor = _processor;
   862  0014E8  C092  F096         	movff	setProcessor@_processor,setProcessor@us+2
   863  0014EC  C093  F097         	movff	setProcessor@_processor+1,setProcessor@us+3
   864  0014F0  0012               	return		;funcret
   865  0014F2                     __end_of_setProcessor:
   866                           	opt callstack 0
   867                           
   868 ;; *************** function _initInputController *****************
   869 ;; Defined at:
   870 ;;		line 115 in file "Button/InputController/InputController.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  controller     16   44[BANK0 ] struct .
   875 ;;  button2         7   37[BANK0 ] struct .
   876 ;;  button1         7   30[BANK0 ] struct .
   877 ;; Return value:  Size  Location     Type
   878 ;;                  16   14[BANK0 ] struct .
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   886 ;;      Params:         0      16       0       0       0       0       0
   887 ;;      Locals:         0      30       0       0       0       0       0
   888 ;;      Temps:          0       0       0       0       0       0       0
   889 ;;      Totals:         0      46       0       0       0       0       0
   890 ;;Total ram usage:       46 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    7
   893 ;; This function calls:
   894 ;;		_Button_initButton
   895 ;;		_addButton
   896 ;; This function is called by:
   897 ;;		_Application_setup
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text5
   902  000CFE                     __ptext5:
   903                           	opt callstack 0
   904  000CFE                     _initInputController:
   905                           	opt callstack 22
   906                           
   907                           ;Button/InputController/InputController.c: 116:     InputController controller;;Button/I
      +                          nputController/InputController.c: 119:     Button button1 = (Button_initButton(&PORTD,0,
      +                           btn1Func));
   908                           
   909                           ;incstack = 0
   910  000CFE  0E83               	movlw	131
   911  000D00  0100               	movlb	0	; () banked
   912  000D02  6F80               	movwf	Button_initButton@portName& (0+255),b
   913  000D04  0E0F               	movlw	15
   914  000D06  6F81               	movwf	(Button_initButton@portName+1)& (0+255),b
   915  000D08  0E00               	movlw	0
   916  000D0A  6F82               	movwf	Button_initButton@pin& (0+255),b
   917  000D0C  0E6C               	movlw	low _btn1Func
   918  000D0E  6F83               	movwf	Button_initButton@onPressed& (0+255),b
   919  000D10  0E11               	movlw	high _btn1Func
   920  000D12  6F84               	movwf	(Button_initButton@onPressed+1)& (0+255),b
   921  000D14  ECB5  F009         	call	_Button_initButton	;wreg free
   922  000D18  EE20  F09E         	lfsr	2,initInputController@button1
   923  000D1C  0E06               	movlw	6
   924  000D1E                     u1641:
   925  000D1E  CFEB FFDB          	movff	plusw0,plusw2
   926  000D22  06E8               	decf	wreg,f,c
   927  000D24  E2FC               	bc	u1641
   928                           
   929                           ;Button/InputController/InputController.c: 120:     Button button2 = (Button_initButton(
      +                          &PORTD,1, btn2Func));
   930  000D26  0E83               	movlw	131
   931  000D28  0100               	movlb	0	; () banked
   932  000D2A  6F80               	movwf	Button_initButton@portName& (0+255),b
   933  000D2C  0E0F               	movlw	15
   934  000D2E  6F81               	movwf	(Button_initButton@portName+1)& (0+255),b
   935  000D30  0E01               	movlw	1
   936  000D32  6F82               	movwf	Button_initButton@pin& (0+255),b
   937  000D34  0ED2               	movlw	low _btn2Func
   938  000D36  6F83               	movwf	Button_initButton@onPressed& (0+255),b
   939  000D38  0E11               	movlw	high _btn2Func
   940  000D3A  6F84               	movwf	(Button_initButton@onPressed+1)& (0+255),b
   941  000D3C  ECB5  F009         	call	_Button_initButton	;wreg free
   942  000D40  EE20  F0A5         	lfsr	2,initInputController@button2
   943  000D44  0E06               	movlw	6
   944  000D46                     u1651:
   945  000D46  CFEB FFDB          	movff	plusw0,plusw2
   946  000D4A  06E8               	decf	wreg,f,c
   947  000D4C  E2FC               	bc	u1651
   948                           
   949                           ;Button/InputController/InputController.c: 121:     addButton(&controller,&button1);
   950  000D4E  0EAC               	movlw	low initInputController@controller
   951  000D50  0100               	movlb	0	; () banked
   952  000D52  6F86               	movwf	addButton@controller& (0+255),b
   953  000D54  0E00               	movlw	high initInputController@controller
   954  000D56  6F87               	movwf	(addButton@controller+1)& (0+255),b
   955  000D58  0E9E               	movlw	low initInputController@button1
   956  000D5A  6F88               	movwf	addButton@button& (0+255),b
   957  000D5C  0E00               	movlw	high initInputController@button1
   958  000D5E  6F89               	movwf	(addButton@button+1)& (0+255),b
   959  000D60  ECD0  F007         	call	_addButton	;wreg free
   960                           
   961                           ;Button/InputController/InputController.c: 122:     addButton(&controller,&button2);
   962  000D64  0EAC               	movlw	low initInputController@controller
   963  000D66  0100               	movlb	0	; () banked
   964  000D68  6F86               	movwf	addButton@controller& (0+255),b
   965  000D6A  0E00               	movlw	high initInputController@controller
   966  000D6C  6F87               	movwf	(addButton@controller+1)& (0+255),b
   967  000D6E  0EA5               	movlw	low initInputController@button2
   968  000D70  6F88               	movwf	addButton@button& (0+255),b
   969  000D72  0E00               	movlw	high initInputController@button2
   970  000D74  6F89               	movwf	(addButton@button+1)& (0+255),b
   971  000D76  ECD0  F007         	call	_addButton	;wreg free
   972                           
   973                           ;Button/InputController/InputController.c: 123:     return controller;
   974  000D7A  EE20  F0AC         	lfsr	2,initInputController@controller
   975  000D7E  EE00  F08E         	lfsr	0,?_initInputController
   976  000D82  0E0F               	movlw	15
   977  000D84                     u1661:
   978  000D84  CFDB FFEB          	movff	plusw2,plusw0
   979  000D88  06E8               	decf	wreg,f,c
   980  000D8A  E2FC               	bc	u1661
   981  000D8C  0012               	return		;funcret
   982  000D8E                     __end_of_initInputController:
   983                           	opt callstack 0
   984                           
   985 ;; *************** function _addButton *****************
   986 ;; Defined at:
   987 ;;		line 76 in file "Button/InputController/InputController.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;  controller      2    6[BANK0 ] PTR struct .
   990 ;;		 -> initInputController@controller(16), 
   991 ;;  button          2    8[BANK0 ] PTR struct .
   992 ;;		 -> initInputController@button2(7), initInputController@button1(7), 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  16    6[BANK0 ] struct .
   997 ;; Registers used:
   998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1004 ;;      Params:         0       4       0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0
  1006 ;;      Temps:          0       2       0       0       0       0       0
  1007 ;;      Totals:         0       6       0       0       0       0       0
  1008 ;;Total ram usage:        6 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    6
  1011 ;; This function calls:
  1012 ;;		___wmul
  1013 ;; This function is called by:
  1014 ;;		_initInputController
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text6
  1019  000FA0                     __ptext6:
  1020                           	opt callstack 0
  1021  000FA0                     _addButton:
  1022                           	opt callstack 22
  1023                           
  1024                           ;Button/InputController/InputController.c: 77:      controller->buttons[(controller->but
      +                          tonSize)] = *button;
  1025                           
  1026                           ;incstack = 0
  1027  000FA0  C088  FFD9         	movff	addButton@button,fsr2l
  1028  000FA4  C089  FFDA         	movff	addButton@button+1,fsr2h
  1029  000FA8  C086  FFE1         	movff	addButton@controller,fsr1l
  1030  000FAC  C087  FFE2         	movff	addButton@controller+1,fsr1h
  1031  000FB0  CFE6 F080          	movff	postinc1,___wmul@multiplier
  1032  000FB4  CFE5 F081          	movff	postdec1,___wmul@multiplier+1
  1033  000FB8  0E00               	movlw	0
  1034  000FBA  0100               	movlb	0	; () banked
  1035  000FBC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1036  000FBE  0E07               	movlw	7
  1037  000FC0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1038  000FC2  EC15  F00A         	call	___wmul	;wreg free
  1039  000FC6  C086  F08A         	movff	addButton@controller,??_addButton
  1040  000FCA  C087  F08B         	movff	addButton@controller+1,??_addButton+1
  1041  000FCE  0100               	movlb	0	; () banked
  1042  000FD0  5180               	movf	?___wmul& (0+255),w,b
  1043  000FD2  278A               	addwf	??_addButton& (0+255),f,b
  1044  000FD4  5181               	movf	(?___wmul+1)& (0+255),w,b
  1045  000FD6  238B               	addwfc	(??_addButton+1)& (0+255),f,b
  1046  000FD8  0E02               	movlw	2
  1047  000FDA  258A               	addwf	??_addButton& (0+255),w,b
  1048  000FDC  6EE1               	movwf	fsr1l,c
  1049  000FDE  0E00               	movlw	0
  1050  000FE0  218B               	addwfc	(??_addButton+1)& (0+255),w,b
  1051  000FE2  6EE2               	movwf	fsr1h,c
  1052  000FE4  0E06               	movlw	6
  1053  000FE6                     u1411:
  1054  000FE6  CFDB FFE3          	movff	plusw2,plusw1
  1055  000FEA  06E8               	decf	wreg,f,c
  1056  000FEC  E2FC               	bc	u1411
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;Button/InputController/InputController.c: 78:      (controller->buttonSize) = (controll
      +                          er->buttonSize)+1;
  1060  000FEE  C086  FFD9         	movff	addButton@controller,fsr2l
  1061  000FF2  C087  FFDA         	movff	addButton@controller+1,fsr2h
  1062  000FF6  CFDE F08A          	movff	postinc2,??_addButton
  1063  000FFA  CFDD F08B          	movff	postdec2,??_addButton+1
  1064  000FFE  0E01               	movlw	1
  1065  001000  278A               	addwf	??_addButton& (0+255),f,b
  1066  001002  0E00               	movlw	0
  1067  001004  238B               	addwfc	(??_addButton+1)& (0+255),f,b
  1068  001006  C086  FFD9         	movff	addButton@controller,fsr2l
  1069  00100A  C087  FFDA         	movff	addButton@controller+1,fsr2h
  1070  00100E  C08A  FFDE         	movff	??_addButton,postinc2
  1071  001012  C08B  FFDD         	movff	??_addButton+1,postdec2
  1072                           
  1073                           ; BSR set to: 0
  1074  001016  0012               	return		;funcret
  1075  001018                     __end_of_addButton:
  1076                           	opt callstack 0
  1077                           
  1078 ;; *************** function _Button_initButton *****************
  1079 ;; Defined at:
  1080 ;;		line 9 in file "Button/Button/Button.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  portName        2    0[BANK0 ] PTR volatile unsigned ch
  1083 ;;		 -> PORTD(1), 
  1084 ;;  pin             1    2[BANK0 ] unsigned char 
  1085 ;;  onPressed       2    3[BANK0 ] PTR FTN()void 
  1086 ;;		 -> btn2Func(1), btn1Func(1), 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  buton           7    7[BANK0 ] struct .
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  7    0[BANK0 ] struct .
  1091 ;; Registers used:
  1092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1098 ;;      Params:         0       7       0       0       0       0       0
  1099 ;;      Locals:         0       7       0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0       0       0
  1101 ;;      Totals:         0      14       0       0       0       0       0
  1102 ;;Total ram usage:       14 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    5
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_initInputController
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           	psect	text7
  1113  00136A                     __ptext7:
  1114                           	opt callstack 0
  1115  00136A                     _Button_initButton:
  1116                           	opt callstack 23
  1117                           
  1118                           ;Button/Button/Button.c: 10:     Button buton;;Button/Button/Button.c: 11:     buton.por
      +                          t = portName;
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;incstack = 0
  1122  00136A  C080  F087         	movff	Button_initButton@portName,Button_initButton@buton
  1123  00136E  C081  F088         	movff	Button_initButton@portName+1,Button_initButton@buton+1
  1124                           
  1125                           ;Button/Button/Button.c: 12:     buton.pin = pin;
  1126  001372  C082  F089         	movff	Button_initButton@pin,Button_initButton@buton+2
  1127                           
  1128                           ;Button/Button/Button.c: 13:     buton.isPressed = 0;
  1129  001376  0E00               	movlw	0
  1130  001378  0100               	movlb	0	; () banked
  1131  00137A  6F8B               	movwf	(Button_initButton@buton+4)& (0+255),b
  1132  00137C  0E00               	movlw	0
  1133  00137E  6F8A               	movwf	(Button_initButton@buton+3)& (0+255),b
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;Button/Button/Button.c: 14:     buton.onPressed = onPressed;
  1137  001380  C083  F08C         	movff	Button_initButton@onPressed,Button_initButton@buton+5
  1138  001384  C084  F08D         	movff	Button_initButton@onPressed+1,Button_initButton@buton+6
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;Button/Button/Button.c: 15:     return buton;
  1142  001388  EE20  F087         	lfsr	2,Button_initButton@buton
  1143  00138C  EE00  F080         	lfsr	0,?_Button_initButton
  1144  001390  0E06               	movlw	6
  1145  001392                     u1421:
  1146  001392  CFDB FFEB          	movff	plusw2,plusw0
  1147  001396  06E8               	decf	wreg,f,c
  1148  001398  E2FC               	bc	u1421
  1149                           
  1150                           ; BSR set to: 0
  1151  00139A  0012               	return		;funcret
  1152  00139C                     __end_of_Button_initButton:
  1153                           	opt callstack 0
  1154                           
  1155 ;; *************** function _USARTInit *****************
  1156 ;; Defined at:
  1157 ;;		line 48 in file "usart/Usart.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  usart           2   26[BANK0 ] PTR struct .
  1160 ;;		 -> Application_setup@usart(18), 
  1161 ;;  baudRate        4   28[BANK0 ] long 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1173 ;;      Params:         0       6       0       0       0       0       0
  1174 ;;      Locals:         0       0       0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0       0       0
  1176 ;;      Totals:         0       6       0       0       0       0       0
  1177 ;;Total ram usage:        6 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    7
  1180 ;; This function calls:
  1181 ;;		_calculateSpbrg
  1182 ;;		_enableInterrupts
  1183 ;;		_setUsart
  1184 ;;		_setupFunctions
  1185 ;; This function is called by:
  1186 ;;		_Application_setup
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text8
  1191  001238                     __ptext8:
  1192                           	opt callstack 0
  1193  001238                     _USARTInit:
  1194                           	opt callstack 22
  1195                           
  1196                           ;usart/Usart.c: 51:     enableInterrupts();
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;incstack = 0
  1200  001238  ECD0  F00A         	call	_enableInterrupts	;wreg free
  1201                           
  1202                           ;usart/Usart.c: 53:     BRGH = 1;
  1203  00123C  84AC               	bsf	4012,2,c	;volatile
  1204                           
  1205                           ;usart/Usart.c: 54:     SPBRG = calculateSpbrg(baudRate);
  1206  00123E  C09C  F08E         	movff	USARTInit@baudRate,calculateSpbrg@baudRate
  1207  001242  C09D  F08F         	movff	USARTInit@baudRate+1,calculateSpbrg@baudRate+1
  1208  001246  C09E  F090         	movff	USARTInit@baudRate+2,calculateSpbrg@baudRate+2
  1209  00124A  C09F  F091         	movff	USARTInit@baudRate+3,calculateSpbrg@baudRate+3
  1210  00124E  EC0C  F008         	call	_calculateSpbrg	;wreg free
  1211  001252  0100               	movlb	0	; () banked
  1212  001254  518E               	movf	?_calculateSpbrg& (0+255),w,b
  1213  001256  6EAF               	movwf	4015,c	;volatile
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;usart/Usart.c: 57:     SYNC = 0;
  1217  001258  98AC               	bcf	4012,4,c	;volatile
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;usart/Usart.c: 58:     SPEN = 1;
  1221  00125A  8EAB               	bsf	4011,7,c	;volatile
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;usart/Usart.c: 60:     TRISC6 = 1;
  1225  00125C  8C94               	bsf	3988,6,c	;volatile
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;usart/Usart.c: 61:     TRISC7 = 1;
  1229  00125E  8E94               	bsf	3988,7,c	;volatile
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;usart/Usart.c: 62:     TXEN = 1;
  1233  001260  8AAC               	bsf	4012,5,c	;volatile
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;usart/Usart.c: 64:     CREN = 1;
  1237  001262  88AB               	bsf	4011,4,c	;volatile
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;usart/Usart.c: 65:     setupFunctions(usart);
  1241  001264  C09A  F080         	movff	USARTInit@usart,setupFunctions@usart
  1242  001268  C09B  F081         	movff	USARTInit@usart+1,setupFunctions@usart+1
  1243  00126C  EC2F  F006         	call	_setupFunctions	;wreg free
  1244                           
  1245                           ;usart/Usart.c: 66:     setUsart(usart);
  1246  001270  C09A  F080         	movff	USARTInit@usart,setUsart@usart
  1247  001274  C09B  F081         	movff	USARTInit@usart+1,setUsart@usart+1
  1248  001278  ECCB  F00A         	call	_setUsart	;wreg free
  1249  00127C  0012               	return		;funcret
  1250  00127E                     __end_of_USARTInit:
  1251                           	opt callstack 0
  1252                           
  1253 ;; *************** function _setupFunctions *****************
  1254 ;; Defined at:
  1255 ;;		line 12 in file "usart/Usart.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  usart           2    0[BANK0 ] PTR struct .
  1258 ;;		 -> Application_setup@usart(18), 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;		None
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1270 ;;      Params:         0       2       0       0       0       0       0
  1271 ;;      Locals:         0       0       0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0
  1273 ;;      Totals:         0       2       0       0       0       0       0
  1274 ;;Total ram usage:        2 bytes
  1275 ;; Hardware stack levels used:    1
  1276 ;; Hardware stack levels required when called:    5
  1277 ;; This function calls:
  1278 ;;		Nothing
  1279 ;; This function is called by:
  1280 ;;		_USARTInit
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text9
  1285  000C5E                     __ptext9:
  1286                           	opt callstack 0
  1287  000C5E                     _setupFunctions:
  1288                           	opt callstack 23
  1289                           
  1290                           ;usart/Usart.c: 14:     usart->isDataReady = USARTDataReady;
  1291                           
  1292                           ;incstack = 0
  1293  000C5E  C080  FFD9         	movff	setupFunctions@usart,fsr2l
  1294  000C62  C081  FFDA         	movff	setupFunctions@usart+1,fsr2h
  1295  000C66  0E4C               	movlw	low _USARTDataReady
  1296  000C68  6EDE               	movwf	postinc2,c
  1297  000C6A  0E15               	movlw	high _USARTDataReady
  1298  000C6C  6EDD               	movwf	postdec2,c
  1299                           
  1300                           ;usart/Usart.c: 17:     usart->readByte = USARTReadByte;
  1301  000C6E  0100               	movlb	0	; () banked
  1302  000C70  EE20 F010          	lfsr	2,16
  1303  000C74  5180               	movf	setupFunctions@usart& (0+255),w,b
  1304  000C76  26D9               	addwf	fsr2l,f,c
  1305  000C78  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1306  000C7A  22DA               	addwfc	fsr2h,f,c
  1307  000C7C  0E00               	movlw	0
  1308  000C7E  6EDE               	movwf	postinc2,c
  1309  000C80  0E00               	movlw	0
  1310  000C82  6EDD               	movwf	postdec2,c
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;usart/Usart.c: 18:     usart->readChar = USARTReadChar;
  1314  000C84  EE20 F004          	lfsr	2,4
  1315  000C88  5180               	movf	setupFunctions@usart& (0+255),w,b
  1316  000C8A  26D9               	addwf	fsr2l,f,c
  1317  000C8C  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1318  000C8E  22DA               	addwfc	fsr2h,f,c
  1319  000C90  0E70               	movlw	low _USARTReadChar
  1320  000C92  6EDE               	movwf	postinc2,c
  1321  000C94  0E15               	movlw	high _USARTReadChar
  1322  000C96  6EDD               	movwf	postdec2,c
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;usart/Usart.c: 19:     usart->readString = USARTReadString;
  1326  000C98  EE20 F006          	lfsr	2,6
  1327  000C9C  5180               	movf	setupFunctions@usart& (0+255),w,b
  1328  000C9E  26D9               	addwf	fsr2l,f,c
  1329  000CA0  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1330  000CA2  22DA               	addwfc	fsr2h,f,c
  1331  000CA4  0E8E               	movlw	low _USARTReadString
  1332  000CA6  6EDE               	movwf	postinc2,c
  1333  000CA8  0E0D               	movlw	high _USARTReadString
  1334  000CAA  6EDD               	movwf	postdec2,c
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;usart/Usart.c: 22:     usart->writeByte = USARTWriteByte;
  1338  000CAC  EE20 F008          	lfsr	2,8
  1339  000CB0  5180               	movf	setupFunctions@usart& (0+255),w,b
  1340  000CB2  26D9               	addwf	fsr2l,f,c
  1341  000CB4  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1342  000CB6  22DA               	addwfc	fsr2h,f,c
  1343  000CB8  0E38               	movlw	low _USARTWriteByte
  1344  000CBA  6EDE               	movwf	postinc2,c
  1345  000CBC  0E15               	movlw	high _USARTWriteByte
  1346  000CBE  6EDD               	movwf	postdec2,c
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;usart/Usart.c: 23:     usart->writeInt = USARTWriteInt;
  1350  000CC0  EE20 F00E          	lfsr	2,14
  1351  000CC4  5180               	movf	setupFunctions@usart& (0+255),w,b
  1352  000CC6  26D9               	addwf	fsr2l,f,c
  1353  000CC8  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1354  000CCA  22DA               	addwfc	fsr2h,f,c
  1355  000CCC  0E40               	movlw	low _USARTWriteInt
  1356  000CCE  6EDE               	movwf	postinc2,c
  1357  000CD0  0E07               	movlw	high _USARTWriteInt
  1358  000CD2  6EDD               	movwf	postdec2,c
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;usart/Usart.c: 24:     usart->writeLine = USARTWriteLine;
  1362  000CD4  EE20 F00C          	lfsr	2,12
  1363  000CD8  5180               	movf	setupFunctions@usart& (0+255),w,b
  1364  000CDA  26D9               	addwf	fsr2l,f,c
  1365  000CDC  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1366  000CDE  22DA               	addwfc	fsr2h,f,c
  1367  000CE0  0E9E               	movlw	low _USARTWriteLine
  1368  000CE2  6EDE               	movwf	postinc2,c
  1369  000CE4  0E14               	movlw	high _USARTWriteLine
  1370  000CE6  6EDD               	movwf	postdec2,c
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;usart/Usart.c: 25:     usart->writeString = USARTWriteString;
  1374  000CE8  EE20 F00A          	lfsr	2,10
  1375  000CEC  5180               	movf	setupFunctions@usart& (0+255),w,b
  1376  000CEE  26D9               	addwf	fsr2l,f,c
  1377  000CF0  5181               	movf	(setupFunctions@usart+1)& (0+255),w,b
  1378  000CF2  22DA               	addwfc	fsr2h,f,c
  1379  000CF4  0E36               	movlw	low _USARTWriteString
  1380  000CF6  6EDE               	movwf	postinc2,c
  1381  000CF8  0E13               	movlw	high _USARTWriteString
  1382  000CFA  6EDD               	movwf	postdec2,c
  1383                           
  1384                           ; BSR set to: 0
  1385  000CFC  0012               	return		;funcret
  1386  000CFE                     __end_of_setupFunctions:
  1387                           	opt callstack 0
  1388                           
  1389 ;; *************** function _setUsart *****************
  1390 ;; Defined at:
  1391 ;;		line 32 in file "usart/Usart.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  usart           2    0[BANK0 ] PTR struct .
  1394 ;;		 -> Application_setup@usart(18), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, status,2, status,0
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1406 ;;      Params:         0       2       0       0       0       0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0
  1409 ;;      Totals:         0       2       0       0       0       0       0
  1410 ;;Total ram usage:        2 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    5
  1413 ;; This function calls:
  1414 ;;		Nothing
  1415 ;; This function is called by:
  1416 ;;		_USARTInit
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text10
  1421  001596                     __ptext10:
  1422                           	opt callstack 0
  1423  001596                     _setUsart:
  1424                           	opt callstack 23
  1425                           
  1426                           ;usart/Usart.c: 33:     applicationUsart = usart;
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;incstack = 0
  1430  001596  C080  F0E3         	movff	setUsart@usart,_applicationUsart
  1431  00159A  C081  F0E4         	movff	setUsart@usart+1,_applicationUsart+1
  1432  00159E  0012               	return		;funcret
  1433  0015A0                     __end_of_setUsart:
  1434                           	opt callstack 0
  1435                           
  1436 ;; *************** function _enableInterrupts *****************
  1437 ;; Defined at:
  1438 ;;		line 38 in file "usart/Usart.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		None
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1452 ;;      Params:         0       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    5
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_USARTInit
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text11
  1467  0015A0                     __ptext11:
  1468                           	opt callstack 0
  1469  0015A0                     _enableInterrupts:
  1470                           	opt callstack 23
  1471                           
  1472                           ;usart/Usart.c: 39:     GIE = 1;
  1473                           
  1474                           ;incstack = 0
  1475  0015A0  8EF2               	bsf	4082,7,c	;volatile
  1476                           
  1477                           ;usart/Usart.c: 40:     PEIE = 1;
  1478  0015A2  8CF2               	bsf	4082,6,c	;volatile
  1479                           
  1480                           ;usart/Usart.c: 41:     RCIE = 1;
  1481  0015A4  8A9D               	bsf	3997,5,c	;volatile
  1482  0015A6  0012               	return		;funcret
  1483  0015A8                     __end_of_enableInterrupts:
  1484                           	opt callstack 0
  1485                           
  1486 ;; *************** function _calculateSpbrg *****************
  1487 ;; Defined at:
  1488 ;;		line 43 in file "usart/Usart.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  baudRate        4   14[BANK0 ] long 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  bolum           4   22[BANK0 ] long 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  4   14[BANK0 ] long 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1502 ;;      Params:         0       4       0       0       0       0       0
  1503 ;;      Locals:         0       4       0       0       0       0       0
  1504 ;;      Temps:          0       4       0       0       0       0       0
  1505 ;;      Totals:         0      12       0       0       0       0       0
  1506 ;;Total ram usage:       12 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    6
  1509 ;; This function calls:
  1510 ;;		___aldiv
  1511 ;; This function is called by:
  1512 ;;		_USARTInit
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text12
  1517  001018                     __ptext12:
  1518                           	opt callstack 0
  1519  001018                     _calculateSpbrg:
  1520                           	opt callstack 22
  1521                           
  1522                           ;usart/Usart.c: 44:     long bolum = 16 * baudRate;
  1523                           
  1524                           ;incstack = 0
  1525  001018  C08E  F092         	movff	calculateSpbrg@baudRate,??_calculateSpbrg
  1526  00101C  C08F  F093         	movff	calculateSpbrg@baudRate+1,??_calculateSpbrg+1
  1527  001020  C090  F094         	movff	calculateSpbrg@baudRate+2,??_calculateSpbrg+2
  1528  001024  C091  F095         	movff	calculateSpbrg@baudRate+3,??_calculateSpbrg+3
  1529  001028  0E04               	movlw	4
  1530  00102A                     u1445:
  1531  00102A  90D8               	bcf	status,0,c
  1532  00102C  0100               	movlb	0	; () banked
  1533  00102E  3792               	rlcf	??_calculateSpbrg& (0+255),f,b
  1534  001030  3793               	rlcf	(??_calculateSpbrg+1)& (0+255),f,b
  1535  001032  3794               	rlcf	(??_calculateSpbrg+2)& (0+255),f,b
  1536  001034  3795               	rlcf	(??_calculateSpbrg+3)& (0+255),f,b
  1537  001036  2EE8               	decfsz	wreg,f,c
  1538  001038  D7F8               	goto	u1445
  1539  00103A  C092  F096         	movff	??_calculateSpbrg,calculateSpbrg@bolum
  1540  00103E  C093  F097         	movff	??_calculateSpbrg+1,calculateSpbrg@bolum+1
  1541  001042  C094  F098         	movff	??_calculateSpbrg+2,calculateSpbrg@bolum+2
  1542  001046  C095  F099         	movff	??_calculateSpbrg+3,calculateSpbrg@bolum+3
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;usart/Usart.c: 45:     return ((8000000 / bolum) - 1);
  1546  00104A  0E00               	movlw	0
  1547  00104C  6F80               	movwf	___aldiv@dividend& (0+255),b
  1548  00104E  0E12               	movlw	18
  1549  001050  6F81               	movwf	(___aldiv@dividend+1)& (0+255),b
  1550  001052  0E7A               	movlw	122
  1551  001054  6F82               	movwf	(___aldiv@dividend+2)& (0+255),b
  1552  001056  0E00               	movlw	0
  1553  001058  6F83               	movwf	(___aldiv@dividend+3)& (0+255),b
  1554  00105A  C096  F084         	movff	calculateSpbrg@bolum,___aldiv@divisor
  1555  00105E  C097  F085         	movff	calculateSpbrg@bolum+1,___aldiv@divisor+1
  1556  001062  C098  F086         	movff	calculateSpbrg@bolum+2,___aldiv@divisor+2
  1557  001066  C099  F087         	movff	calculateSpbrg@bolum+3,___aldiv@divisor+3
  1558  00106A  EC0E  F005         	call	___aldiv	;wreg free
  1559  00106E  0EFF               	movlw	255
  1560  001070  0100               	movlb	0	; () banked
  1561  001072  2580               	addwf	?___aldiv& (0+255),w,b
  1562  001074  6F8E               	movwf	?_calculateSpbrg& (0+255),b
  1563  001076  0EFF               	movlw	255
  1564  001078  2181               	addwfc	(?___aldiv+1)& (0+255),w,b
  1565  00107A  6F8F               	movwf	(?_calculateSpbrg+1)& (0+255),b
  1566  00107C  0EFF               	movlw	255
  1567  00107E  2182               	addwfc	(?___aldiv+2)& (0+255),w,b
  1568  001080  6F90               	movwf	(?_calculateSpbrg+2)& (0+255),b
  1569  001082  0EFF               	movlw	255
  1570  001084  2183               	addwfc	(?___aldiv+3)& (0+255),w,b
  1571  001086  6F91               	movwf	(?_calculateSpbrg+3)& (0+255),b
  1572                           
  1573                           ; BSR set to: 0
  1574  001088  0012               	return		;funcret
  1575  00108A                     __end_of_calculateSpbrg:
  1576                           	opt callstack 0
  1577                           
  1578 ;; *************** function ___aldiv *****************
  1579 ;; Defined at:
  1580 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aldiv.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  dividend        4    0[BANK0 ] long 
  1583 ;;  divisor         4    4[BANK0 ] long 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  quotient        4   10[BANK0 ] long 
  1586 ;;  sign            1    9[BANK0 ] unsigned char 
  1587 ;;  counter         1    8[BANK0 ] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  4    0[BANK0 ] long 
  1590 ;; Registers used:
  1591 ;;		wreg, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1597 ;;      Params:         0       8       0       0       0       0       0
  1598 ;;      Locals:         0       6       0       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0       0       0
  1600 ;;      Totals:         0      14       0       0       0       0       0
  1601 ;;Total ram usage:       14 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; Hardware stack levels required when called:    5
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_calculateSpbrg
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text13
  1612  000A1C                     __ptext13:
  1613                           	opt callstack 0
  1614  000A1C                     ___aldiv:
  1615                           	opt callstack 22
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;incstack = 0
  1619  000A1C  0E00               	movlw	0
  1620  000A1E  0100               	movlb	0	; () banked
  1621  000A20  6F89               	movwf	___aldiv@sign& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624  000A22  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1625  000A24  D00A               	goto	l1744
  1626                           
  1627                           ; BSR set to: 0
  1628  000A26  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1629  000A28  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1630  000A2A  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1631  000A2C  6D84               	negf	___aldiv@divisor& (0+255),b
  1632  000A2E  0E00               	movlw	0
  1633  000A30  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1634  000A32  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1635  000A34  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1636                           
  1637                           ; BSR set to: 0
  1638  000A36  0E01               	movlw	1
  1639  000A38  6F89               	movwf	___aldiv@sign& (0+255),b
  1640  000A3A                     l1744:
  1641                           
  1642                           ; BSR set to: 0
  1643  000A3A  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1644  000A3C  D00A               	goto	l1750
  1645                           
  1646                           ; BSR set to: 0
  1647  000A3E  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1648  000A40  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1649  000A42  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1650  000A44  6D80               	negf	___aldiv@dividend& (0+255),b
  1651  000A46  0E00               	movlw	0
  1652  000A48  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1653  000A4A  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1654  000A4C  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1655                           
  1656                           ; BSR set to: 0
  1657  000A4E  0E01               	movlw	1
  1658  000A50  1B89               	xorwf	___aldiv@sign& (0+255),f,b
  1659  000A52                     l1750:
  1660                           
  1661                           ; BSR set to: 0
  1662  000A52  0E00               	movlw	0
  1663  000A54  6F8A               	movwf	___aldiv@quotient& (0+255),b
  1664  000A56  0E00               	movlw	0
  1665  000A58  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
  1666  000A5A  0E00               	movlw	0
  1667  000A5C  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
  1668  000A5E  0E00               	movlw	0
  1669  000A60  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
  1670                           
  1671                           ; BSR set to: 0
  1672  000A62  5184               	movf	___aldiv@divisor& (0+255),w,b
  1673  000A64  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1674  000A66  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1675  000A68  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1676  000A6A  B4D8               	btfsc	status,2,c
  1677  000A6C  D02A               	goto	l1772
  1678                           
  1679                           ; BSR set to: 0
  1680  000A6E  0E01               	movlw	1
  1681  000A70  6F88               	movwf	___aldiv@counter& (0+255),b
  1682  000A72  D006               	goto	l1758
  1683  000A74                     l1756:
  1684                           
  1685                           ; BSR set to: 0
  1686  000A74  90D8               	bcf	status,0,c
  1687  000A76  3784               	rlcf	___aldiv@divisor& (0+255),f,b
  1688  000A78  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1689  000A7A  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1690  000A7C  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1691  000A7E  2B88               	incf	___aldiv@counter& (0+255),f,b
  1692  000A80                     l1758:
  1693                           
  1694                           ; BSR set to: 0
  1695  000A80  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1696  000A82  D7F8               	goto	l1756
  1697  000A84                     u1330:
  1698                           
  1699                           ; BSR set to: 0
  1700  000A84  90D8               	bcf	status,0,c
  1701  000A86  378A               	rlcf	___aldiv@quotient& (0+255),f,b
  1702  000A88  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1703  000A8A  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1704  000A8C  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1705                           
  1706                           ; BSR set to: 0
  1707  000A8E  5184               	movf	___aldiv@divisor& (0+255),w,b
  1708  000A90  5D80               	subwf	___aldiv@dividend& (0+255),w,b
  1709  000A92  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1710  000A94  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1711  000A96  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1712  000A98  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1713  000A9A  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1714  000A9C  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1715  000A9E  A0D8               	btfss	status,0,c
  1716  000AA0  D009               	goto	l1768
  1717                           
  1718                           ; BSR set to: 0
  1719  000AA2  5184               	movf	___aldiv@divisor& (0+255),w,b
  1720  000AA4  5F80               	subwf	___aldiv@dividend& (0+255),f,b
  1721  000AA6  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1722  000AA8  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1723  000AAA  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1724  000AAC  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1725  000AAE  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1726  000AB0  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1727                           
  1728                           ; BSR set to: 0
  1729  000AB2  818A               	bsf	___aldiv@quotient& (0+255),0,b
  1730  000AB4                     l1768:
  1731                           
  1732                           ; BSR set to: 0
  1733  000AB4  90D8               	bcf	status,0,c
  1734  000AB6  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1735  000AB8  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1736  000ABA  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1737  000ABC  3384               	rrcf	___aldiv@divisor& (0+255),f,b
  1738                           
  1739                           ; BSR set to: 0
  1740  000ABE  2F88               	decfsz	___aldiv@counter& (0+255),f,b
  1741  000AC0  D7E1               	goto	u1330
  1742  000AC2                     l1772:
  1743                           
  1744                           ; BSR set to: 0
  1745  000AC2  5189               	movf	___aldiv@sign& (0+255),w,b
  1746  000AC4  B4D8               	btfsc	status,2,c
  1747  000AC6  D008               	goto	l1776
  1748                           
  1749                           ; BSR set to: 0
  1750  000AC8  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1751  000ACA  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1752  000ACC  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1753  000ACE  6D8A               	negf	___aldiv@quotient& (0+255),b
  1754  000AD0  0E00               	movlw	0
  1755  000AD2  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1756  000AD4  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1757  000AD6  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1758  000AD8                     l1776:
  1759                           
  1760                           ; BSR set to: 0
  1761  000AD8  C08A  F080         	movff	___aldiv@quotient,?___aldiv
  1762  000ADC  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
  1763  000AE0  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
  1764  000AE4  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
  1765                           
  1766                           ; BSR set to: 0
  1767  000AE8  0012               	return		;funcret
  1768  000AEA                     __end_of___aldiv:
  1769                           	opt callstack 0
  1770                           
  1771 ;; *************** function _Application_loop *****************
  1772 ;; Defined at:
  1773 ;;		line 42 in file "Application/Application.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1787 ;;      Params:         0       0       0       0       0       0       0
  1788 ;;      Locals:         0       0       0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0
  1790 ;;      Totals:         0       0       0       0       0       0       0
  1791 ;;Total ram usage:        0 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:   10
  1794 ;; This function calls:
  1795 ;;		_InputController_checkButtons
  1796 ;; This function is called by:
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text14
  1802  001560                     __ptext14:
  1803                           	opt callstack 0
  1804  001560                     _Application_loop:
  1805                           	opt callstack 20
  1806                           
  1807                           ;Application/Application.c: 49:     InputController_checkButtons(&controller);
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;incstack = 0
  1811  001560  0ED3               	movlw	low _controller
  1812  001562  0100               	movlb	0	; () banked
  1813  001564  6FA4               	movwf	InputController_checkButtons@controller& (0+255),b
  1814  001566  0E00               	movlw	high _controller
  1815  001568  6FA5               	movwf	(InputController_checkButtons@controller+1)& (0+255),b
  1816  00156A  EC92  F007         	call	_InputController_checkButtons	;wreg free
  1817  00156E  0012               	return		;funcret
  1818  001570                     __end_of_Application_loop:
  1819                           	opt callstack 0
  1820                           
  1821 ;; *************** function _InputController_checkButtons *****************
  1822 ;; Defined at:
  1823 ;;		line 54 in file "Button/InputController/InputController.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  controller      2   36[BANK0 ] PTR struct .
  1826 ;;		 -> controller(16), 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  buton           7   43[BANK0 ] struct .
  1829 ;;  i               2   41[BANK0 ] int 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1839 ;;      Params:         0       2       0       0       0       0       0
  1840 ;;      Locals:         0       9       0       0       0       0       0
  1841 ;;      Temps:          0       3       0       0       0       0       0
  1842 ;;      Totals:         0      14       0       0       0       0       0
  1843 ;;Total ram usage:       14 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; Hardware stack levels required when called:    9
  1846 ;; This function calls:
  1847 ;;		___wmul
  1848 ;;		_handleButtonEvents
  1849 ;; This function is called by:
  1850 ;;		_Application_loop
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text15
  1855  000F24                     __ptext15:
  1856                           	opt callstack 0
  1857  000F24                     _InputController_checkButtons:
  1858                           	opt callstack 20
  1859                           
  1860                           ;Button/InputController/InputController.c: 55:     int i;;Button/InputController/InputCo
      +                          ntroller.c: 58:     for (i = 0; i < controller->buttonSize; i++) {
  1861                           
  1862                           ;incstack = 0
  1863  000F24  0E00               	movlw	0
  1864  000F26  0100               	movlb	0	; () banked
  1865  000F28  6FAA               	movwf	(InputController_checkButtons@i+1)& (0+255),b
  1866  000F2A  0E00               	movlw	0
  1867  000F2C  6FA9               	movwf	InputController_checkButtons@i& (0+255),b
  1868  000F2E  D029               	goto	l2006
  1869  000F30                     l2000:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;Button/InputController/InputController.c: 60:         Button buton = controller->button
      +                          s[i];
  1873  000F30  C0A9  F080         	movff	InputController_checkButtons@i,___wmul@multiplier
  1874  000F34  C0AA  F081         	movff	InputController_checkButtons@i+1,___wmul@multiplier+1
  1875  000F38  0E00               	movlw	0
  1876  000F3A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1877  000F3C  0E07               	movlw	7
  1878  000F3E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1879  000F40  EC15  F00A         	call	___wmul	;wreg free
  1880  000F44  C0A4  F0A6         	movff	InputController_checkButtons@controller,??_InputController_checkButtons
  1881  000F48  C0A5  F0A7         	movff	InputController_checkButtons@controller+1,??_InputController_checkButtons+1
  1882  000F4C  0100               	movlb	0	; () banked
  1883  000F4E  5180               	movf	?___wmul& (0+255),w,b
  1884  000F50  27A6               	addwf	??_InputController_checkButtons& (0+255),f,b
  1885  000F52  5181               	movf	(?___wmul+1)& (0+255),w,b
  1886  000F54  23A7               	addwfc	(??_InputController_checkButtons+1)& (0+255),f,b
  1887  000F56  0E02               	movlw	2
  1888  000F58  25A6               	addwf	??_InputController_checkButtons& (0+255),w,b
  1889  000F5A  6ED9               	movwf	fsr2l,c
  1890  000F5C  0E00               	movlw	0
  1891  000F5E  21A7               	addwfc	(??_InputController_checkButtons+1)& (0+255),w,b
  1892  000F60  6EDA               	movwf	fsr2h,c
  1893  000F62  EE10  F0AB         	lfsr	1,InputController_checkButtons@buton
  1894  000F66  0E06               	movlw	6
  1895  000F68                     u1671:
  1896  000F68  CFDB FFE3          	movff	plusw2,plusw1
  1897  000F6C  06E8               	decf	wreg,f,c
  1898  000F6E  E2FC               	bc	u1671
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;Button/InputController/InputController.c: 62:         handleButtonEvents(&buton);
  1902  000F70  0EAB               	movlw	low InputController_checkButtons@buton
  1903  000F72  6FA0               	movwf	handleButtonEvents@buton& (0+255),b
  1904  000F74  0E00               	movlw	high InputController_checkButtons@buton
  1905  000F76  6FA1               	movwf	(handleButtonEvents@buton+1)& (0+255),b
  1906  000F78  EC9A  F004         	call	_handleButtonEvents	;wreg free
  1907                           
  1908                           ;Button/InputController/InputController.c: 65:     }
  1909  000F7C  0100               	movlb	0	; () banked
  1910  000F7E  4BA9               	infsnz	InputController_checkButtons@i& (0+255),f,b
  1911  000F80  2BAA               	incf	(InputController_checkButtons@i+1)& (0+255),f,b
  1912  000F82                     l2006:
  1913                           
  1914                           ; BSR set to: 0
  1915  000F82  C0A4  FFD9         	movff	InputController_checkButtons@controller,fsr2l
  1916  000F86  C0A5  FFDA         	movff	InputController_checkButtons@controller+1,fsr2h
  1917  000F8A  50DE               	movf	postinc2,w,c
  1918  000F8C  5DA9               	subwf	InputController_checkButtons@i& (0+255),w,b
  1919  000F8E  51AA               	movf	(InputController_checkButtons@i+1)& (0+255),w,b
  1920  000F90  0A80               	xorlw	128
  1921  000F92  6FA8               	movwf	(??_InputController_checkButtons+2)& (0+255),b
  1922  000F94  50DE               	movf	postinc2,w,c
  1923  000F96  0A80               	xorlw	128
  1924  000F98  59A8               	subwfb	(??_InputController_checkButtons+2)& (0+255),w,b
  1925  000F9A  B0D8               	btfsc	status,0,c
  1926  000F9C  0012               	return	
  1927  000F9E  D7C8               	goto	l2000
  1928  000FA0                     __end_of_InputController_checkButtons:
  1929                           	opt callstack 0
  1930                           
  1931 ;; *************** function _handleButtonEvents *****************
  1932 ;; Defined at:
  1933 ;;		line 12 in file "Button/InputController/InputController.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  buton           2   32[BANK0 ] PTR struct .
  1936 ;;		 -> InputController_checkButtons@buton(7), 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1948 ;;      Params:         0       2       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0
  1950 ;;      Temps:          0       2       0       0       0       0       0
  1951 ;;      Totals:         0       4       0       0       0       0       0
  1952 ;;Total ram usage:        4 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    8
  1955 ;; This function calls:
  1956 ;;		_Button_getValue
  1957 ;;		_USARTWriteInt
  1958 ;;		_USARTWriteLine
  1959 ;;		_btn1Func
  1960 ;;		_btn2Func
  1961 ;;		_getUsart
  1962 ;; This function is called by:
  1963 ;;		_InputController_checkButtons
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text16
  1968  000934                     __ptext16:
  1969                           	opt callstack 0
  1970  000934                     _handleButtonEvents:
  1971                           	opt callstack 20
  1972                           
  1973                           ;Button/InputController/InputController.c: 25:     if (Button_getValue(buton) == 1) {
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;incstack = 0
  1977  000934  C0A0  F085         	movff	handleButtonEvents@buton,Button_getValue@button
  1978  000938  C0A1  F086         	movff	handleButtonEvents@buton+1,Button_getValue@button+1
  1979  00093C  EC3F  F009         	call	_Button_getValue	;wreg free
  1980  000940  0100               	movlb	0	; () banked
  1981  000942  0585               	decf	?_Button_getValue& (0+255),w,b
  1982  000944  1186               	iorwf	(?_Button_getValue+1)& (0+255),w,b
  1983  000946  A4D8               	btfss	status,2,c
  1984  000948  D05E               	goto	l1792
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;Button/InputController/InputController.c: 29:         if (buton->isPressed == 0) {
  1988  00094A  EE20 F003          	lfsr	2,3
  1989  00094E  51A0               	movf	handleButtonEvents@buton& (0+255),w,b
  1990  000950  26D9               	addwf	fsr2l,f,c
  1991  000952  51A1               	movf	(handleButtonEvents@buton+1)& (0+255),w,b
  1992  000954  22DA               	addwfc	fsr2h,f,c
  1993  000956  50DE               	movf	postinc2,w,c
  1994  000958  10DE               	iorwf	postinc2,w,c
  1995  00095A  A4D8               	btfss	status,2,c
  1996  00095C  D048               	goto	u1409
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;Button/InputController/InputController.c: 30:             buton->onPressed();
  2000  00095E  EE20 F005          	lfsr	2,5
  2001  000962  51A0               	movf	handleButtonEvents@buton& (0+255),w,b
  2002  000964  26D9               	addwf	fsr2l,f,c
  2003  000966  51A1               	movf	(handleButtonEvents@buton+1)& (0+255),w,b
  2004  000968  22DA               	addwfc	fsr2h,f,c
  2005  00096A  D801               	call	u1388
  2006  00096C  D00A               	goto	u1389
  2007  00096E                     u1388:
  2008  00096E  0005               	push	
  2009  000970  6EFA               	movwf	pclath,c
  2010  000972  50DE               	movf	postinc2,w,c
  2011  000974  6EFD               	movwf	tosl,c
  2012  000976  50DE               	movf	postinc2,w,c
  2013  000978  6EFE               	movwf	tosh,c
  2014  00097A  50F8               	movf	tblptru,w,c
  2015  00097C  6EFF               	movwf	tosu,c
  2016  00097E  50FA               	movf	pclath,w,c
  2017  000980  0012               	return		;indir
  2018  000982                     u1389:
  2019                           
  2020                           ;Button/InputController/InputController.c: 31:             getUsart().writeInt(buton->is
      +                          Pressed,2);
  2021  000982  0100               	movlb	0	; () banked
  2022  000984  EE20 F003          	lfsr	2,3
  2023  000988  51A0               	movf	handleButtonEvents@buton& (0+255),w,b
  2024  00098A  26D9               	addwf	fsr2l,f,c
  2025  00098C  51A1               	movf	(handleButtonEvents@buton+1)& (0+255),w,b
  2026  00098E  22DA               	addwfc	fsr2h,f,c
  2027  000990  CFDE F092          	movff	postinc2,USARTWriteInt@val
  2028  000994  CFDD F093          	movff	postdec2,USARTWriteInt@val+1
  2029  000998  0E02               	movlw	2
  2030  00099A  6F94               	movwf	USARTWriteInt@field_length& (0+255),b
  2031  00099C  EC79  F00A         	call	_getUsart	;wreg free
  2032  0009A0  0E0E               	movlw	14
  2033  0009A2  26E9               	addwf	fsr0l,f,c
  2034  0009A4  0E00               	movlw	0
  2035  0009A6  22EA               	addwfc	fsr0h,f,c
  2036  0009A8  D801               	call	u1398
  2037  0009AA  D00A               	goto	u1399
  2038  0009AC                     u1398:
  2039  0009AC  0005               	push	
  2040  0009AE  6EFA               	movwf	pclath,c
  2041  0009B0  50EE               	movf	postinc0,w,c
  2042  0009B2  6EFD               	movwf	tosl,c
  2043  0009B4  50EE               	movf	postinc0,w,c
  2044  0009B6  6EFE               	movwf	tosh,c
  2045  0009B8  50F8               	movf	tblptru,w,c
  2046  0009BA  6EFF               	movwf	tosu,c
  2047  0009BC  50FA               	movf	pclath,w,c
  2048  0009BE  0012               	return		;indir
  2049  0009C0                     u1399:
  2050                           
  2051                           ;Button/InputController/InputController.c: 32:     getUsart().writeLine("");
  2052  0009C0  0E03               	movlw	low (STR_3+2)
  2053  0009C2  0100               	movlb	0	; () banked
  2054  0009C4  6F94               	movwf	USARTWriteLine@ln& (0+255),b
  2055  0009C6  0E06               	movlw	high (STR_3+2)
  2056  0009C8  6F95               	movwf	(USARTWriteLine@ln+1)& (0+255),b
  2057  0009CA  EC79  F00A         	call	_getUsart	;wreg free
  2058  0009CE  0E0C               	movlw	12
  2059  0009D0  26E9               	addwf	fsr0l,f,c
  2060  0009D2  0E00               	movlw	0
  2061  0009D4  22EA               	addwfc	fsr0h,f,c
  2062  0009D6  D801               	call	u1408
  2063  0009D8  D00A               	goto	u1409
  2064  0009DA                     u1408:
  2065  0009DA  0005               	push	
  2066  0009DC  6EFA               	movwf	pclath,c
  2067  0009DE  50EE               	movf	postinc0,w,c
  2068  0009E0  6EFD               	movwf	tosl,c
  2069  0009E2  50EE               	movf	postinc0,w,c
  2070  0009E4  6EFE               	movwf	tosh,c
  2071  0009E6  50F8               	movf	tblptru,w,c
  2072  0009E8  6EFF               	movwf	tosu,c
  2073  0009EA  50FA               	movf	pclath,w,c
  2074  0009EC  0012               	return		;indir
  2075  0009EE                     u1409:
  2076                           
  2077                           ;Button/InputController/InputController.c: 37:         buton->isPressed = 1;
  2078  0009EE  0100               	movlb	0	; () banked
  2079  0009F0  EE20 F003          	lfsr	2,3
  2080  0009F4  51A0               	movf	handleButtonEvents@buton& (0+255),w,b
  2081  0009F6  26D9               	addwf	fsr2l,f,c
  2082  0009F8  51A1               	movf	(handleButtonEvents@buton+1)& (0+255),w,b
  2083  0009FA  22DA               	addwfc	fsr2h,f,c
  2084  0009FC  0E01               	movlw	1
  2085  0009FE  6EDE               	movwf	postinc2,c
  2086  000A00  0E00               	movlw	0
  2087  000A02  6EDD               	movwf	postdec2,c
  2088                           
  2089                           ;Button/InputController/InputController.c: 41:     }
  2090  000A04  0012               	return	
  2091  000A06                     l1792:
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;Button/InputController/InputController.c: 43:          buton->isPressed = 0;
  2095  000A06  EE20 F003          	lfsr	2,3
  2096  000A0A  51A0               	movf	handleButtonEvents@buton& (0+255),w,b
  2097  000A0C  26D9               	addwf	fsr2l,f,c
  2098  000A0E  51A1               	movf	(handleButtonEvents@buton+1)& (0+255),w,b
  2099  000A10  22DA               	addwfc	fsr2h,f,c
  2100  000A12  0E00               	movlw	0
  2101  000A14  6EDE               	movwf	postinc2,c
  2102  000A16  0E00               	movlw	0
  2103  000A18  6EDD               	movwf	postdec2,c
  2104                           
  2105                           ; BSR set to: 0
  2106  000A1A  0012               	return		;funcret
  2107  000A1C                     __end_of_handleButtonEvents:
  2108                           	opt callstack 0
  2109                           
  2110 ;; *************** function _btn1Func *****************
  2111 ;; Defined at:
  2112 ;;		line 91 in file "Button/InputController/InputController.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  deger           2    0        int 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2126 ;;      Params:         0       0       0       0       0       0       0
  2127 ;;      Locals:         0       2       0       0       0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0
  2129 ;;      Totals:         0       2       0       0       0       0       0
  2130 ;;Total ram usage:        2 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    7
  2133 ;; This function calls:
  2134 ;;		_USARTWriteInt
  2135 ;;		_USARTWriteString
  2136 ;;		_getUsart
  2137 ;; This function is called by:
  2138 ;;		_initInputController
  2139 ;;		_handleButtonEvents
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text17
  2144  00116C                     __ptext17:
  2145                           	opt callstack 0
  2146  00116C                     _btn1Func:
  2147                           	opt callstack 20
  2148                           
  2149                           ;Button/InputController/InputController.c: 92:     LATB = LATB << 1;
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;incstack = 0
  2153  00116C  508A               	movf	3978,w,c	;volatile
  2154  00116E  248A               	addwf	3978,w,c	;volatile
  2155  001170  6E8A               	movwf	3978,c	;volatile
  2156                           
  2157                           ;Button/InputController/InputController.c: 94:     getUsart().writeInt(deger,2);
  2158  001172  0E00               	movlw	0
  2159  001174  0100               	movlb	0	; () banked
  2160  001176  6F93               	movwf	(USARTWriteInt@val+1)& (0+255),b
  2161  001178  0E05               	movlw	5
  2162  00117A  6F92               	movwf	USARTWriteInt@val& (0+255),b
  2163  00117C  0E02               	movlw	2
  2164  00117E  6F94               	movwf	USARTWriteInt@field_length& (0+255),b
  2165  001180  EC79  F00A         	call	_getUsart	;wreg free
  2166  001184  0E0E               	movlw	14
  2167  001186  26E9               	addwf	fsr0l,f,c
  2168  001188  0E00               	movlw	0
  2169  00118A  22EA               	addwfc	fsr0h,f,c
  2170  00118C  D801               	call	u1258
  2171  00118E  D00A               	goto	u1259
  2172  001190                     u1258:
  2173  001190  0005               	push	
  2174  001192  6EFA               	movwf	pclath,c
  2175  001194  50EE               	movf	postinc0,w,c
  2176  001196  6EFD               	movwf	tosl,c
  2177  001198  50EE               	movf	postinc0,w,c
  2178  00119A  6EFE               	movwf	tosh,c
  2179  00119C  50F8               	movf	tblptru,w,c
  2180  00119E  6EFF               	movwf	tosu,c
  2181  0011A0  50FA               	movf	pclath,w,c
  2182  0011A2  0012               	return		;indir
  2183  0011A4                     u1259:
  2184                           
  2185                           ;Button/InputController/InputController.c: 95:     getUsart().writeString("\r\n");
  2186  0011A4  0E01               	movlw	low STR_3
  2187  0011A6  0100               	movlb	0	; () banked
  2188  0011A8  6F92               	movwf	USARTWriteString@str& (0+255),b
  2189  0011AA  0E06               	movlw	high STR_3
  2190  0011AC  6F93               	movwf	(USARTWriteString@str+1)& (0+255),b
  2191  0011AE  EC79  F00A         	call	_getUsart	;wreg free
  2192  0011B2  0E0A               	movlw	10
  2193  0011B4  26E9               	addwf	fsr0l,f,c
  2194  0011B6  0E00               	movlw	0
  2195  0011B8  22EA               	addwfc	fsr0h,f,c
  2196  0011BA  D801               	call	u1268
  2197  0011BC  0012               	return	
  2198  0011BE                     u1268:
  2199  0011BE  0005               	push	
  2200  0011C0  6EFA               	movwf	pclath,c
  2201  0011C2  50EE               	movf	postinc0,w,c
  2202  0011C4  6EFD               	movwf	tosl,c
  2203  0011C6  50EE               	movf	postinc0,w,c
  2204  0011C8  6EFE               	movwf	tosh,c
  2205  0011CA  50F8               	movf	tblptru,w,c
  2206  0011CC  6EFF               	movwf	tosu,c
  2207  0011CE  50FA               	movf	pclath,w,c
  2208  0011D0  0012               	return		;indir
  2209  0011D2                     __end_of_btn1Func:
  2210                           	opt callstack 0
  2211                           
  2212 ;; *************** function _btn2Func *****************
  2213 ;; Defined at:
  2214 ;;		line 101 in file "Button/InputController/InputController.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  deger           2    0        int 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2228 ;;      Params:         0       0       0       0       0       0       0
  2229 ;;      Locals:         0       2       0       0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0
  2231 ;;      Totals:         0       2       0       0       0       0       0
  2232 ;;Total ram usage:        2 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    7
  2235 ;; This function calls:
  2236 ;;		_USARTWriteInt
  2237 ;;		_USARTWriteString
  2238 ;;		_getUsart
  2239 ;; This function is called by:
  2240 ;;		_initInputController
  2241 ;;		_handleButtonEvents
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text18
  2246  0011D2                     __ptext18:
  2247                           	opt callstack 0
  2248  0011D2                     _btn2Func:
  2249                           	opt callstack 20
  2250                           
  2251                           ;Button/InputController/InputController.c: 103:     LATB = LATB >> 1;
  2252                           
  2253                           ;incstack = 0
  2254  0011D2  90D8               	bcf	status,0,c
  2255  0011D4  308A               	rrcf	3978,w,c	;volatile
  2256  0011D6  6E8A               	movwf	3978,c	;volatile
  2257                           
  2258                           ;Button/InputController/InputController.c: 105:     getUsart().writeInt(deger,2);
  2259  0011D8  0EFF               	movlw	255
  2260  0011DA  0100               	movlb	0	; () banked
  2261  0011DC  6F93               	movwf	(USARTWriteInt@val+1)& (0+255),b
  2262  0011DE  0EFB               	movlw	251
  2263  0011E0  6F92               	movwf	USARTWriteInt@val& (0+255),b
  2264  0011E2  0E02               	movlw	2
  2265  0011E4  6F94               	movwf	USARTWriteInt@field_length& (0+255),b
  2266  0011E6  EC79  F00A         	call	_getUsart	;wreg free
  2267  0011EA  0E0E               	movlw	14
  2268  0011EC  26E9               	addwf	fsr0l,f,c
  2269  0011EE  0E00               	movlw	0
  2270  0011F0  22EA               	addwfc	fsr0h,f,c
  2271  0011F2  D801               	call	u1278
  2272  0011F4  D00A               	goto	u1279
  2273  0011F6                     u1278:
  2274  0011F6  0005               	push	
  2275  0011F8  6EFA               	movwf	pclath,c
  2276  0011FA  50EE               	movf	postinc0,w,c
  2277  0011FC  6EFD               	movwf	tosl,c
  2278  0011FE  50EE               	movf	postinc0,w,c
  2279  001200  6EFE               	movwf	tosh,c
  2280  001202  50F8               	movf	tblptru,w,c
  2281  001204  6EFF               	movwf	tosu,c
  2282  001206  50FA               	movf	pclath,w,c
  2283  001208  0012               	return		;indir
  2284  00120A                     u1279:
  2285                           
  2286                           ;Button/InputController/InputController.c: 106:     getUsart().writeString("\r\n");
  2287  00120A  0E01               	movlw	low STR_3
  2288  00120C  0100               	movlb	0	; () banked
  2289  00120E  6F92               	movwf	USARTWriteString@str& (0+255),b
  2290  001210  0E06               	movlw	high STR_3
  2291  001212  6F93               	movwf	(USARTWriteString@str+1)& (0+255),b
  2292  001214  EC79  F00A         	call	_getUsart	;wreg free
  2293  001218  0E0A               	movlw	10
  2294  00121A  26E9               	addwf	fsr0l,f,c
  2295  00121C  0E00               	movlw	0
  2296  00121E  22EA               	addwfc	fsr0h,f,c
  2297  001220  D801               	call	u1288
  2298  001222  0012               	return	
  2299  001224                     u1288:
  2300  001224  0005               	push	
  2301  001226  6EFA               	movwf	pclath,c
  2302  001228  50EE               	movf	postinc0,w,c
  2303  00122A  6EFD               	movwf	tosl,c
  2304  00122C  50EE               	movf	postinc0,w,c
  2305  00122E  6EFE               	movwf	tosh,c
  2306  001230  50F8               	movf	tblptru,w,c
  2307  001232  6EFF               	movwf	tosu,c
  2308  001234  50FA               	movf	pclath,w,c
  2309  001236  0012               	return		;indir
  2310  001238                     __end_of_btn2Func:
  2311                           	opt callstack 0
  2312                           
  2313 ;; *************** function _getUsart *****************
  2314 ;; Defined at:
  2315 ;;		line 28 in file "usart/Usart.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  18    0[BANK0 ] struct .
  2322 ;; Registers used:
  2323 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2329 ;;      Params:         0      18       0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0
  2332 ;;      Totals:         0      18       0       0       0       0       0
  2333 ;;Total ram usage:       18 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    5
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_setProcessor
  2340 ;;		_handleButtonEvents
  2341 ;;		_btn1Func
  2342 ;;		_btn2Func
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text19
  2347  0014F2                     __ptext19:
  2348                           	opt callstack 0
  2349  0014F2                     _getUsart:
  2350                           	opt callstack 23
  2351                           
  2352                           ;usart/Usart.c: 29:     return *applicationUsart;
  2353                           
  2354                           ;incstack = 0
  2355  0014F2  C0E3  FFD9         	movff	_applicationUsart,fsr2l
  2356  0014F6  C0E4  FFDA         	movff	_applicationUsart+1,fsr2h
  2357  0014FA  EE00  F080         	lfsr	0,?_getUsart
  2358  0014FE  0E11               	movlw	17
  2359  001500                     u1121:
  2360  001500  CFDB FFEB          	movff	plusw2,plusw0
  2361  001504  06E8               	decf	wreg,f,c
  2362  001506  E2FC               	bc	u1121
  2363  001508  0012               	return		;funcret
  2364  00150A                     __end_of_getUsart:
  2365                           	opt callstack 0
  2366                           
  2367 ;; *************** function _USARTWriteInt *****************
  2368 ;; Defined at:
  2369 ;;		line 96 in file "usart/UsartFunctions.h"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  val             2   18[BANK0 ] int 
  2372 ;;  field_length    1   20[BANK0 ] unsigned char 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;  str             5   21[BANK0 ] unsigned char [5]
  2375 ;;  i               2   28[BANK0 ] int 
  2376 ;;  j               2   26[BANK0 ] int 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2386 ;;      Params:         0       3       0       0       0       0       0
  2387 ;;      Locals:         0       9       0       0       0       0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0
  2389 ;;      Totals:         0      12       0       0       0       0       0
  2390 ;;Total ram usage:       12 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    6
  2393 ;; This function calls:
  2394 ;;		_USARTWriteByte
  2395 ;;		___awdiv
  2396 ;;		___awmod
  2397 ;; This function is called by:
  2398 ;;		_setupFunctions
  2399 ;;		_btn1Func
  2400 ;;		_btn2Func
  2401 ;;		_handleButtonEvents
  2402 ;;		_usartOccured
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text20
  2407  000740                     __ptext20:
  2408                           	opt callstack 0
  2409  000740                     _USARTWriteInt:
  2410                           	opt callstack 0
  2411                           
  2412                           ;Skip over the trampoline to the duplicate function for level 2
  2413  000740  B25D               	btfsc	btemp,1,c
  2414  000742  EF21  F004         	goto	i2_USARTWriteInt
  2415  000746                     _USARTWriteInt$intlevel0:
  2416                           	opt callstack 20
  2417                           
  2418                           ;usart/UsartFunctions.h: 97:     if (val < 0) {
  2419                           
  2420                           ;incstack = 0
  2421  000746  0100               	movlb	0	; () banked
  2422  000748  AF93               	btfss	(USARTWriteInt@val+1)& (0+255),7,b
  2423  00074A  D008               	goto	l1668
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;usart/UsartFunctions.h: 98:         USARTWriteByte('-');
  2427  00074C  0E2D               	movlw	45
  2428  00074E  EC9C  F00A         	call	_USARTWriteByte
  2429                           
  2430                           ;usart/UsartFunctions.h: 99:         val = (val * (-1));
  2431  000752  0100               	movlb	0	; () banked
  2432  000754  6D92               	negf	USARTWriteInt@val& (0+255),b
  2433  000756  1F93               	comf	(USARTWriteInt@val+1)& (0+255),f,b
  2434  000758  B0D8               	btfsc	status,0,c
  2435  00075A  2B93               	incf	(USARTWriteInt@val+1)& (0+255),f,b
  2436  00075C                     l1668:
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;usart/UsartFunctions.h: 103:     char str[5] = {0, 0, 0, 0, 0};
  2440  00075C  EE20  F0CE         	lfsr	2,USARTWriteInt@F2935
  2441  000760  EE10  F095         	lfsr	1,USARTWriteInt@str
  2442  000764  0E04               	movlw	4
  2443  000766                     u1191:
  2444  000766  CFDB FFE3          	movff	plusw2,plusw1
  2445  00076A  06E8               	decf	wreg,f,c
  2446  00076C  E2FC               	bc	u1191
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;usart/UsartFunctions.h: 104:     int i = 4, j = 0;
  2450  00076E  0E00               	movlw	0
  2451  000770  6F9D               	movwf	(USARTWriteInt@i+1)& (0+255),b
  2452  000772  0E04               	movlw	4
  2453  000774  6F9C               	movwf	USARTWriteInt@i& (0+255),b
  2454                           
  2455                           ; BSR set to: 0
  2456  000776  0E00               	movlw	0
  2457  000778  6F9B               	movwf	(USARTWriteInt@j+1)& (0+255),b
  2458  00077A  0E00               	movlw	0
  2459  00077C  6F9A               	movwf	USARTWriteInt@j& (0+255),b
  2460                           
  2461                           ;usart/UsartFunctions.h: 105:     while (val) {
  2462  00077E  D025               	goto	l1680
  2463  000780                     l1674:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;usart/UsartFunctions.h: 106:         str[i] = val % 10;
  2467  000780  0E95               	movlw	low USARTWriteInt@str
  2468  000782  259C               	addwf	USARTWriteInt@i& (0+255),w,b
  2469  000784  6ED9               	movwf	fsr2l,c
  2470  000786  0E00               	movlw	high USARTWriteInt@str
  2471  000788  219D               	addwfc	(USARTWriteInt@i+1)& (0+255),w,b
  2472  00078A  6EDA               	movwf	fsr2h,c
  2473  00078C  C092  F080         	movff	USARTWriteInt@val,___awmod@dividend
  2474  000790  C093  F081         	movff	USARTWriteInt@val+1,___awmod@dividend+1
  2475  000794  0E00               	movlw	0
  2476  000796  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2477  000798  0E0A               	movlw	10
  2478  00079A  6F82               	movwf	___awmod@divisor& (0+255),b
  2479  00079C  EC45  F008         	call	___awmod	;wreg free
  2480  0007A0  0100               	movlb	0	; () banked
  2481  0007A2  5180               	movf	?___awmod& (0+255),w,b
  2482  0007A4  6EDF               	movwf	indf2,c
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;usart/UsartFunctions.h: 107:         val = val / 10;
  2486  0007A6  C092  F080         	movff	USARTWriteInt@val,___awdiv@dividend
  2487  0007AA  C093  F081         	movff	USARTWriteInt@val+1,___awdiv@dividend+1
  2488  0007AE  0E00               	movlw	0
  2489  0007B0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2490  0007B2  0E0A               	movlw	10
  2491  0007B4  6F82               	movwf	___awdiv@divisor& (0+255),b
  2492  0007B6  EC0D  F007         	call	___awdiv	;wreg free
  2493  0007BA  C080  F092         	movff	?___awdiv,USARTWriteInt@val
  2494  0007BE  C081  F093         	movff	?___awdiv+1,USARTWriteInt@val+1
  2495                           
  2496                           ;usart/UsartFunctions.h: 108:         i--;
  2497  0007C2  0100               	movlb	0	; () banked
  2498  0007C4  079C               	decf	USARTWriteInt@i& (0+255),f,b
  2499  0007C6  A0D8               	btfss	status,0,c
  2500  0007C8  079D               	decf	(USARTWriteInt@i+1)& (0+255),f,b
  2501  0007CA                     l1680:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;usart/UsartFunctions.h: 105:     while (val) {
  2505  0007CA  5192               	movf	USARTWriteInt@val& (0+255),w,b
  2506  0007CC  1193               	iorwf	(USARTWriteInt@val+1)& (0+255),w,b
  2507  0007CE  A4D8               	btfss	status,2,c
  2508  0007D0  D7D7               	goto	l1674
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;usart/UsartFunctions.h: 110:     if (field_length > 5)
  2512  0007D2  0E05               	movlw	5
  2513  0007D4  6594               	cpfsgt	USARTWriteInt@field_length& (0+255),b
  2514  0007D6  D00D               	goto	l1690
  2515  0007D8  D002               	goto	l1688
  2516  0007DA                     l1686:
  2517                           
  2518                           ; BSR set to: 0
  2519  0007DA  4B9A               	infsnz	USARTWriteInt@j& (0+255),f,b
  2520  0007DC  2B9B               	incf	(USARTWriteInt@j+1)& (0+255),f,b
  2521  0007DE                     l1688:
  2522                           
  2523                           ; BSR set to: 0
  2524  0007DE  0E95               	movlw	low USARTWriteInt@str
  2525  0007E0  259A               	addwf	USARTWriteInt@j& (0+255),w,b
  2526  0007E2  6ED9               	movwf	fsr2l,c
  2527  0007E4  0E00               	movlw	high USARTWriteInt@str
  2528  0007E6  219B               	addwfc	(USARTWriteInt@j+1)& (0+255),w,b
  2529  0007E8  6EDA               	movwf	fsr2h,c
  2530  0007EA  50DF               	movf	indf2,w,c
  2531  0007EC  A4D8               	btfss	status,2,c
  2532  0007EE  D009               	goto	l1692
  2533  0007F0  D7F4               	goto	l1686
  2534  0007F2                     l1690:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;usart/UsartFunctions.h: 113:         j = 5 - field_length;
  2538  0007F2  5194               	movf	USARTWriteInt@field_length& (0+255),w,b
  2539  0007F4  0805               	sublw	5
  2540  0007F6  6F9A               	movwf	USARTWriteInt@j& (0+255),b
  2541  0007F8  0E00               	movlw	0
  2542  0007FA  A0D8               	btfss	status,0,c
  2543  0007FC  2AE8               	incf	wreg,f,c
  2544  0007FE  0800               	sublw	0
  2545  000800  6F9B               	movwf	(USARTWriteInt@j+1)& (0+255),b
  2546  000802                     l1692:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;usart/UsartFunctions.h: 115:     for (i = j; i < 5; i++) {
  2550  000802  C09A  F09C         	movff	USARTWriteInt@j,USARTWriteInt@i
  2551  000806  C09B  F09D         	movff	USARTWriteInt@j+1,USARTWriteInt@i+1
  2552  00080A  BF9D               	btfsc	(USARTWriteInt@i+1)& (0+255),7,b
  2553  00080C  D003               	goto	l1696
  2554  00080E  519D               	movf	(USARTWriteInt@i+1)& (0+255),w,b
  2555  000810  E117               	bnz	l206
  2556  000812  D011               	goto	L1
  2557  000814                     l1696:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;usart/UsartFunctions.h: 116:         USARTWriteByte('0' + str[i] );
  2561  000814  0E95               	movlw	low USARTWriteInt@str
  2562  000816  259C               	addwf	USARTWriteInt@i& (0+255),w,b
  2563  000818  6ED9               	movwf	fsr2l,c
  2564  00081A  0E00               	movlw	high USARTWriteInt@str
  2565  00081C  219D               	addwfc	(USARTWriteInt@i+1)& (0+255),w,b
  2566  00081E  6EDA               	movwf	fsr2h,c
  2567  000820  50DF               	movf	indf2,w,c
  2568  000822  0F30               	addlw	48
  2569  000824  EC9C  F00A         	call	_USARTWriteByte
  2570                           
  2571                           ;usart/UsartFunctions.h: 117:     }
  2572  000828  0100               	movlb	0	; () banked
  2573  00082A  4B9C               	infsnz	USARTWriteInt@i& (0+255),f,b
  2574  00082C  2B9D               	incf	(USARTWriteInt@i+1)& (0+255),f,b
  2575                           
  2576                           ; BSR set to: 0
  2577  00082E  BF9D               	btfsc	(USARTWriteInt@i+1)& (0+255),7,b
  2578  000830  D7F1               	goto	l1696
  2579  000832  519D               	movf	(USARTWriteInt@i+1)& (0+255),w,b
  2580  000834  E105               	bnz	u1240
  2581  000836                     L1:
  2582  000836  0E05               	movlw	5
  2583  000838  5D9C               	subwf	USARTWriteInt@i& (0+255),w,b
  2584  00083A  B0D8               	btfsc	status,0,c
  2585  00083C  0012               	return	
  2586  00083E  D7EA               	goto	l1696
  2587  000840                     u1240:
  2588  000840                     l206:
  2589                           
  2590                           ; BSR set to: 0
  2591  000840  0012               	return		;funcret
  2592  000842                     __end_of_USARTWriteInt:
  2593                           	opt callstack 0
  2594                           
  2595 ;; *************** function ___awmod *****************
  2596 ;; Defined at:
  2597 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  dividend        2    0[BANK0 ] int 
  2600 ;;  divisor         2    2[BANK0 ] int 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  sign            1    5[BANK0 ] unsigned char 
  2603 ;;  counter         1    4[BANK0 ] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  2    0[BANK0 ] int 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2613 ;;      Params:         0       4       0       0       0       0       0
  2614 ;;      Locals:         0       2       0       0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0
  2616 ;;      Totals:         0       6       0       0       0       0       0
  2617 ;;Total ram usage:        6 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    5
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_USARTWriteInt
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text21
  2628  00108A                     __ptext21:
  2629                           	opt callstack 0
  2630  00108A                     ___awmod:
  2631                           	opt callstack 20
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;incstack = 0
  2635  00108A  0E00               	movlw	0
  2636  00108C  0100               	movlb	0	; () banked
  2637  00108E  6F85               	movwf	___awmod@sign& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640  001090  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  2641  001092  D006               	goto	l1618
  2642                           
  2643                           ; BSR set to: 0
  2644  001094  6D80               	negf	___awmod@dividend& (0+255),b
  2645  001096  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  2646  001098  B0D8               	btfsc	status,0,c
  2647  00109A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  2648                           
  2649                           ; BSR set to: 0
  2650  00109C  0E01               	movlw	1
  2651  00109E  6F85               	movwf	___awmod@sign& (0+255),b
  2652  0010A0                     l1618:
  2653                           
  2654                           ; BSR set to: 0
  2655  0010A0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2656  0010A2  D004               	goto	l1622
  2657                           
  2658                           ; BSR set to: 0
  2659  0010A4  6D82               	negf	___awmod@divisor& (0+255),b
  2660  0010A6  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  2661  0010A8  B0D8               	btfsc	status,0,c
  2662  0010AA  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  2663  0010AC                     l1622:
  2664                           
  2665                           ; BSR set to: 0
  2666  0010AC  5182               	movf	___awmod@divisor& (0+255),w,b
  2667  0010AE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2668  0010B0  B4D8               	btfsc	status,2,c
  2669  0010B2  D018               	goto	l1638
  2670                           
  2671                           ; BSR set to: 0
  2672  0010B4  0E01               	movlw	1
  2673  0010B6  6F84               	movwf	___awmod@counter& (0+255),b
  2674  0010B8  D004               	goto	l1628
  2675  0010BA                     l1626:
  2676                           
  2677                           ; BSR set to: 0
  2678  0010BA  90D8               	bcf	status,0,c
  2679  0010BC  3782               	rlcf	___awmod@divisor& (0+255),f,b
  2680  0010BE  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2681  0010C0  2B84               	incf	___awmod@counter& (0+255),f,b
  2682  0010C2                     l1628:
  2683                           
  2684                           ; BSR set to: 0
  2685  0010C2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2686  0010C4  D7FA               	goto	l1626
  2687  0010C6                     u1090:
  2688                           
  2689                           ; BSR set to: 0
  2690  0010C6  5182               	movf	___awmod@divisor& (0+255),w,b
  2691  0010C8  5D80               	subwf	___awmod@dividend& (0+255),w,b
  2692  0010CA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  2693  0010CC  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2694  0010CE  A0D8               	btfss	status,0,c
  2695  0010D0  D004               	goto	l1634
  2696                           
  2697                           ; BSR set to: 0
  2698  0010D2  5182               	movf	___awmod@divisor& (0+255),w,b
  2699  0010D4  5F80               	subwf	___awmod@dividend& (0+255),f,b
  2700  0010D6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  2701  0010D8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2702  0010DA                     l1634:
  2703                           
  2704                           ; BSR set to: 0
  2705  0010DA  90D8               	bcf	status,0,c
  2706  0010DC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2707  0010DE  3382               	rrcf	___awmod@divisor& (0+255),f,b
  2708                           
  2709                           ; BSR set to: 0
  2710  0010E0  2F84               	decfsz	___awmod@counter& (0+255),f,b
  2711  0010E2  D7F1               	goto	u1090
  2712  0010E4                     l1638:
  2713                           
  2714                           ; BSR set to: 0
  2715  0010E4  5185               	movf	___awmod@sign& (0+255),w,b
  2716  0010E6  B4D8               	btfsc	status,2,c
  2717  0010E8  D004               	goto	l1642
  2718                           
  2719                           ; BSR set to: 0
  2720  0010EA  6D80               	negf	___awmod@dividend& (0+255),b
  2721  0010EC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  2722  0010EE  B0D8               	btfsc	status,0,c
  2723  0010F0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  2724  0010F2                     l1642:
  2725                           
  2726                           ; BSR set to: 0
  2727  0010F2  C080  F080         	movff	___awmod@dividend,?___awmod
  2728  0010F6  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  2729                           
  2730                           ; BSR set to: 0
  2731  0010FA  0012               	return		;funcret
  2732  0010FC                     __end_of___awmod:
  2733                           	opt callstack 0
  2734                           
  2735 ;; *************** function ___awdiv *****************
  2736 ;; Defined at:
  2737 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  dividend        2    0[BANK0 ] int 
  2740 ;;  divisor         2    2[BANK0 ] int 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  quotient        2    6[BANK0 ] int 
  2743 ;;  sign            1    5[BANK0 ] unsigned char 
  2744 ;;  counter         1    4[BANK0 ] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  2    0[BANK0 ] int 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       4       0       0       0       0       0
  2755 ;;      Locals:         0       4       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         0       8       0       0       0       0       0
  2758 ;;Total ram usage:        8 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    5
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_USARTWriteInt
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text22
  2769  000E1A                     __ptext22:
  2770                           	opt callstack 0
  2771  000E1A                     ___awdiv:
  2772                           	opt callstack 20
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;incstack = 0
  2776  000E1A  0E00               	movlw	0
  2777  000E1C  0100               	movlb	0	; () banked
  2778  000E1E  6F85               	movwf	___awdiv@sign& (0+255),b
  2779                           
  2780                           ; BSR set to: 0
  2781  000E20  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2782  000E22  D006               	goto	l1574
  2783                           
  2784                           ; BSR set to: 0
  2785  000E24  6D82               	negf	___awdiv@divisor& (0+255),b
  2786  000E26  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2787  000E28  B0D8               	btfsc	status,0,c
  2788  000E2A  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2789                           
  2790                           ; BSR set to: 0
  2791  000E2C  0E01               	movlw	1
  2792  000E2E  6F85               	movwf	___awdiv@sign& (0+255),b
  2793  000E30                     l1574:
  2794                           
  2795                           ; BSR set to: 0
  2796  000E30  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2797  000E32  D006               	goto	l1580
  2798                           
  2799                           ; BSR set to: 0
  2800  000E34  6D80               	negf	___awdiv@dividend& (0+255),b
  2801  000E36  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2802  000E38  B0D8               	btfsc	status,0,c
  2803  000E3A  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2804                           
  2805                           ; BSR set to: 0
  2806  000E3C  0E01               	movlw	1
  2807  000E3E  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  2808  000E40                     l1580:
  2809                           
  2810                           ; BSR set to: 0
  2811  000E40  0E00               	movlw	0
  2812  000E42  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  2813  000E44  0E00               	movlw	0
  2814  000E46  6F86               	movwf	___awdiv@quotient& (0+255),b
  2815                           
  2816                           ; BSR set to: 0
  2817  000E48  5182               	movf	___awdiv@divisor& (0+255),w,b
  2818  000E4A  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2819  000E4C  B4D8               	btfsc	status,2,c
  2820  000E4E  D01C               	goto	l1602
  2821                           
  2822                           ; BSR set to: 0
  2823  000E50  0E01               	movlw	1
  2824  000E52  6F84               	movwf	___awdiv@counter& (0+255),b
  2825  000E54  D004               	goto	l1588
  2826  000E56                     l1586:
  2827                           
  2828                           ; BSR set to: 0
  2829  000E56  90D8               	bcf	status,0,c
  2830  000E58  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  2831  000E5A  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2832  000E5C  2B84               	incf	___awdiv@counter& (0+255),f,b
  2833  000E5E                     l1588:
  2834                           
  2835                           ; BSR set to: 0
  2836  000E5E  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2837  000E60  D7FA               	goto	l1586
  2838  000E62                     u1030:
  2839                           
  2840                           ; BSR set to: 0
  2841  000E62  90D8               	bcf	status,0,c
  2842  000E64  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  2843  000E66  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2844                           
  2845                           ; BSR set to: 0
  2846  000E68  5182               	movf	___awdiv@divisor& (0+255),w,b
  2847  000E6A  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  2848  000E6C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2849  000E6E  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2850  000E70  A0D8               	btfss	status,0,c
  2851  000E72  D005               	goto	l1598
  2852                           
  2853                           ; BSR set to: 0
  2854  000E74  5182               	movf	___awdiv@divisor& (0+255),w,b
  2855  000E76  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  2856  000E78  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2857  000E7A  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2858                           
  2859                           ; BSR set to: 0
  2860  000E7C  8186               	bsf	___awdiv@quotient& (0+255),0,b
  2861  000E7E                     l1598:
  2862                           
  2863                           ; BSR set to: 0
  2864  000E7E  90D8               	bcf	status,0,c
  2865  000E80  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2866  000E82  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  2867                           
  2868                           ; BSR set to: 0
  2869  000E84  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  2870  000E86  D7ED               	goto	u1030
  2871  000E88                     l1602:
  2872                           
  2873                           ; BSR set to: 0
  2874  000E88  5185               	movf	___awdiv@sign& (0+255),w,b
  2875  000E8A  B4D8               	btfsc	status,2,c
  2876  000E8C  D004               	goto	l1606
  2877                           
  2878                           ; BSR set to: 0
  2879  000E8E  6D86               	negf	___awdiv@quotient& (0+255),b
  2880  000E90  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2881  000E92  B0D8               	btfsc	status,0,c
  2882  000E94  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2883  000E96                     l1606:
  2884                           
  2885                           ; BSR set to: 0
  2886  000E96  C086  F080         	movff	___awdiv@quotient,?___awdiv
  2887  000E9A  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  2888                           
  2889                           ; BSR set to: 0
  2890  000E9E  0012               	return		;funcret
  2891  000EA0                     __end_of___awdiv:
  2892                           	opt callstack 0
  2893                           
  2894 ;; *************** function _USARTWriteByte *****************
  2895 ;; Defined at:
  2896 ;;		line 61 in file "usart/UsartFunctions.h"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  ch              1    wreg     unsigned char 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  ch              1    0[BANK0 ] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         0       0       0       0       0       0       0
  2911 ;;      Locals:         0       1       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0
  2913 ;;      Totals:         0       1       0       0       0       0       0
  2914 ;;Total ram usage:        1 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    5
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_USARTWriteInt
  2921 ;;		_setupFunctions
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text23
  2926  001538                     __ptext23:
  2927                           	opt callstack 0
  2928  001538                     _USARTWriteByte:
  2929                           	opt callstack 0
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;Skip over the trampoline to the duplicate function for level 2
  2933  001538  B25D               	btfsc	btemp,1,c
  2934  00153A  EFC0  F00A         	goto	i2_USARTWriteByte
  2935  00153E                     _USARTWriteByte$intlevel0:
  2936                           	opt callstack 20
  2937                           
  2938                           ;incstack = 0
  2939                           ;USARTWriteByte@ch stored from wreg
  2940  00153E  0100               	movlb	0	; () banked
  2941  001540  6F80               	movwf	USARTWriteByte@ch& (0+255),b
  2942  001542                     
  2943                           ;usart/UsartFunctions.h: 63:     while (!TXIF);
  2944  001542  A89E               	btfss	3998,4,c	;volatile
  2945  001544  D7FE               	goto	l1562
  2946                           
  2947                           ;usart/UsartFunctions.h: 66:     TXREG = ch;
  2948  001546  C080  FFAD         	movff	USARTWriteByte@ch,4013	;volatile
  2949  00154A  0012               	return		;funcret
  2950  00154C                     __end_of_USARTWriteByte:
  2951                           	opt callstack 0
  2952                           
  2953 ;; *************** function _USARTWriteLine *****************
  2954 ;; Defined at:
  2955 ;;		line 91 in file "usart/UsartFunctions.h"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  ln              2   20[BANK0 ] PTR const unsigned char 
  2958 ;;		 -> STR_2(1), STR_1(1), 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2970 ;;      Params:         0       2       0       0       0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0
  2973 ;;      Totals:         0       2       0       0       0       0       0
  2974 ;;Total ram usage:        2 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    6
  2977 ;; This function calls:
  2978 ;;		_USARTWriteString
  2979 ;; This function is called by:
  2980 ;;		_setupFunctions
  2981 ;;		_handleButtonEvents
  2982 ;;		_usartOccured
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text24
  2987  00149E                     __ptext24:
  2988                           	opt callstack 0
  2989  00149E                     _USARTWriteLine:
  2990                           	opt callstack 0
  2991                           
  2992                           ;Skip over the trampoline to the duplicate function for level 2
  2993  00149E  B25D               	btfsc	btemp,1,c
  2994  0014A0  EF60  F00A         	goto	i2_USARTWriteLine
  2995  0014A4                     _USARTWriteLine$intlevel0:
  2996                           	opt callstack 21
  2997                           
  2998                           ;usart/UsartFunctions.h: 92:     USARTWriteString(ln);
  2999                           
  3000                           ;incstack = 0
  3001  0014A4  C094  F092         	movff	USARTWriteLine@ln,USARTWriteString@str
  3002  0014A8  C095  F093         	movff	USARTWriteLine@ln+1,USARTWriteString@str+1
  3003  0014AC  EC9B  F009         	call	_USARTWriteString	;wreg free
  3004                           
  3005                           ;usart/UsartFunctions.h: 93:     USARTWriteString("\r\n");
  3006  0014B0  0E01               	movlw	low STR_3
  3007  0014B2  0100               	movlb	0	; () banked
  3008  0014B4  6F92               	movwf	USARTWriteString@str& (0+255),b
  3009  0014B6  0E06               	movlw	high STR_3
  3010  0014B8  6F93               	movwf	(USARTWriteString@str+1)& (0+255),b
  3011  0014BA  EC9B  F009         	call	_USARTWriteString	;wreg free
  3012  0014BE  0012               	return		;funcret
  3013  0014C0                     __end_of_USARTWriteLine:
  3014                           	opt callstack 0
  3015                           
  3016 ;; *************** function _USARTWriteString *****************
  3017 ;; Defined at:
  3018 ;;		line 69 in file "usart/UsartFunctions.h"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  str             2   18[BANK0 ] PTR const unsigned char 
  3021 ;;		 -> STR_5(3), STR_4(3), STR_3(3), STR_2(1), 
  3022 ;;		 -> STR_1(1), 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3034 ;;      Params:         0       2       0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0
  3037 ;;      Totals:         0       2       0       0       0       0       0
  3038 ;;Total ram usage:        2 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    5
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_USARTWriteLine
  3045 ;;		_setupFunctions
  3046 ;;		_btn1Func
  3047 ;;		_btn2Func
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text25
  3052  001336                     __ptext25:
  3053                           	opt callstack 0
  3054  001336                     _USARTWriteString:
  3055                           	opt callstack 0
  3056                           
  3057                           ;Skip over the trampoline to the duplicate function for level 2
  3058  001336  B25D               	btfsc	btemp,1,c
  3059  001338  EFFF  F009         	goto	i2_USARTWriteString
  3060  00133C                     _USARTWriteString$intlevel0:
  3061                           	opt callstack 21
  3062                           
  3063                           ;usart/UsartFunctions.h: 70:     while ((*str) != '\0') {
  3064                           
  3065                           ;incstack = 0
  3066  00133C  D00C               	goto	l1660
  3067  00133E                     l183:
  3068  00133E  A89E               	btfss	3998,4,c	;volatile
  3069  001340  D7FE               	goto	l183
  3070                           
  3071                           ;usart/UsartFunctions.h: 75:         TXREG = (*str);
  3072  001342  C092  FFF6         	movff	USARTWriteString@str,tblptrl
  3073  001346  C093  FFF7         	movff	USARTWriteString@str+1,tblptrh
  3074  00134A                     	if	0	;tblptru may be non-zero
  3075  00134A                     	endif
  3076  00134A                     	if	0	;tblptru may be non-zero
  3077  00134A                     	endif
  3078  00134A  0008               	tblrd		*
  3079  00134C  CFF5 FFAD          	movff	tablat,4013	;volatile
  3080                           
  3081                           ;usart/UsartFunctions.h: 78:         str++;
  3082  001350  0100               	movlb	0	; () banked
  3083  001352  4B92               	infsnz	USARTWriteString@str& (0+255),f,b
  3084  001354  2B93               	incf	(USARTWriteString@str+1)& (0+255),f,b
  3085  001356                     l1660:
  3086                           
  3087                           ;usart/UsartFunctions.h: 70:     while ((*str) != '\0') {
  3088  001356  C092  FFF6         	movff	USARTWriteString@str,tblptrl
  3089  00135A  C093  FFF7         	movff	USARTWriteString@str+1,tblptrh
  3090  00135E                     	if	0	;tblptru may be non-zero
  3091  00135E                     	endif
  3092  00135E                     	if	0	;tblptru may be non-zero
  3093  00135E                     	endif
  3094  00135E  0008               	tblrd		*
  3095  001360  50F5               	movf	tablat,w,c
  3096  001362  0900               	iorlw	0
  3097  001364  B4D8               	btfsc	status,2,c
  3098  001366  0012               	return	
  3099  001368  D7EA               	goto	l183
  3100  00136A                     __end_of_USARTWriteString:
  3101                           	opt callstack 0
  3102                           
  3103 ;; *************** function _Button_getValue *****************
  3104 ;; Defined at:
  3105 ;;		line 23 in file "Button/Button/Button.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  button          2    5[BANK0 ] PTR struct .
  3108 ;;		 -> InputController_checkButtons@buton(7), 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  value           2   10[BANK0 ] int 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2    5[BANK0 ] int 
  3113 ;; Registers used:
  3114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3120 ;;      Params:         0       2       0       0       0       0       0
  3121 ;;      Locals:         0       2       0       0       0       0       0
  3122 ;;      Temps:          0       3       0       0       0       0       0
  3123 ;;      Totals:         0       7       0       0       0       0       0
  3124 ;;Total ram usage:        7 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    6
  3127 ;; This function calls:
  3128 ;;		_getThBit
  3129 ;; This function is called by:
  3130 ;;		_handleButtonEvents
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text26
  3135  00127E                     __ptext26:
  3136                           	opt callstack 0
  3137  00127E                     _Button_getValue:
  3138                           	opt callstack 21
  3139                           
  3140                           ;Button/Button/Button.c: 25:     int value = *(button->port) ;
  3141                           
  3142                           ;incstack = 0
  3143  00127E  C085  FFD9         	movff	Button_getValue@button,fsr2l
  3144  001282  C086  FFDA         	movff	Button_getValue@button+1,fsr2h
  3145  001286  CFDE F087          	movff	postinc2,??_Button_getValue
  3146  00128A  CFDD F088          	movff	postdec2,??_Button_getValue+1
  3147  00128E  C087  FFD9         	movff	??_Button_getValue,fsr2l
  3148  001292  C088  FFDA         	movff	??_Button_getValue+1,fsr2h
  3149  001296  50DF               	movf	indf2,w,c
  3150  001298  0100               	movlb	0	; () banked
  3151  00129A  6F89               	movwf	(??_Button_getValue+2)& (0+255),b
  3152  00129C  5189               	movf	(??_Button_getValue+2)& (0+255),w,b
  3153  00129E  6F8A               	movwf	Button_getValue@value& (0+255),b
  3154  0012A0  6B8B               	clrf	(Button_getValue@value+1)& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;Button/Button/Button.c: 27:     return getThBit(value,button->pin);
  3158  0012A2  EE20 F002          	lfsr	2,2
  3159  0012A6  5185               	movf	Button_getValue@button& (0+255),w,b
  3160  0012A8  26D9               	addwf	fsr2l,f,c
  3161  0012AA  5186               	movf	(Button_getValue@button+1)& (0+255),w,b
  3162  0012AC  22DA               	addwfc	fsr2h,f,c
  3163  0012AE  50DF               	movf	indf2,w,c
  3164  0012B0  6F80               	movwf	getThBit@connectedBit& (0+255),b
  3165  0012B2  518A               	movf	Button_getValue@value& (0+255),w,b
  3166  0012B4  ECCE  F009         	call	_getThBit
  3167  0012B8  C080  F085         	movff	?_getThBit,?_Button_getValue
  3168  0012BC  C081  F086         	movff	?_getThBit+1,?_Button_getValue+1
  3169  0012C0  0012               	return		;funcret
  3170  0012C2                     __end_of_Button_getValue:
  3171                           	opt callstack 0
  3172                           
  3173 ;; *************** function _getThBit *****************
  3174 ;; Defined at:
  3175 ;;		line 18 in file "Button/Button/Button.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  port            1    wreg     unsigned char 
  3178 ;;  connectedBit    1    0[BANK0 ] unsigned char 
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  port            1    4[BANK0 ] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  2    0[BANK0 ] int 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3190 ;;      Params:         0       2       0       0       0       0       0
  3191 ;;      Locals:         0       1       0       0       0       0       0
  3192 ;;      Temps:          0       2       0       0       0       0       0
  3193 ;;      Totals:         0       5       0       0       0       0       0
  3194 ;;Total ram usage:        5 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    5
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_Button_getValue
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text27
  3205  00139C                     __ptext27:
  3206                           	opt callstack 0
  3207  00139C                     _getThBit:
  3208                           	opt callstack 21
  3209                           
  3210                           ;incstack = 0
  3211                           ;getThBit@port stored from wreg
  3212  00139C  0100               	movlb	0	; () banked
  3213  00139E  6F84               	movwf	getThBit@port& (0+255),b
  3214                           
  3215                           ;Button/Button/Button.c: 19:     return (port & (1 << connectedBit)) > 0 ? 1 : 0;
  3216  0013A0  C080  F082         	movff	getThBit@connectedBit,??_getThBit
  3217  0013A4  0E01               	movlw	1
  3218  0013A6  0100               	movlb	0	; () banked
  3219  0013A8  6F83               	movwf	(??_getThBit+1)& (0+255),b
  3220  0013AA  2B82               	incf	??_getThBit& (0+255),f,b
  3221  0013AC  D002               	goto	u1134
  3222  0013AE                     u1135:
  3223  0013AE  90D8               	bcf	status,0,c
  3224  0013B0  3783               	rlcf	(??_getThBit+1)& (0+255),f,b
  3225  0013B2                     u1134:
  3226  0013B2  2F82               	decfsz	??_getThBit& (0+255),f,b
  3227  0013B4  D7FC               	goto	u1135
  3228  0013B6  0100               	movlb	0	; () banked
  3229  0013B8  5183               	movf	(??_getThBit+1)& (0+255),w,b
  3230  0013BA  1584               	andwf	getThBit@port& (0+255),w,b
  3231  0013BC  0900               	iorlw	0
  3232  0013BE  B4D8               	btfsc	status,2,c
  3233  0013C0  D002               	goto	u1140
  3234  0013C2  0E01               	movlw	1
  3235  0013C4  D001               	goto	u1150
  3236  0013C6                     u1140:
  3237  0013C6  0E00               	movlw	0
  3238  0013C8                     u1150:
  3239  0013C8  6F80               	movwf	?_getThBit& (0+255),b
  3240  0013CA  6B81               	clrf	(?_getThBit+1)& (0+255),b
  3241                           
  3242                           ; BSR set to: 0
  3243  0013CC  0012               	return		;funcret
  3244  0013CE                     __end_of_getThBit:
  3245                           	opt callstack 0
  3246                           
  3247 ;; *************** function ___wmul *****************
  3248 ;; Defined at:
  3249 ;;		line 15 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3252 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  product         2    4[BANK0 ] unsigned int 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  2    0[BANK0 ] unsigned int 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0, prodl, prodh
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3264 ;;      Params:         0       4       0       0       0       0       0
  3265 ;;      Locals:         0       2       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0
  3267 ;;      Totals:         0       6       0       0       0       0       0
  3268 ;;Total ram usage:        6 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    5
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_atoi
  3275 ;;		_InputController_checkButtons
  3276 ;;		_addButton
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text28
  3281  00142A                     __ptext28:
  3282                           	opt callstack 0
  3283  00142A                     ___wmul:
  3284                           	opt callstack 22
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;incstack = 0
  3288  00142A  0100               	movlb	0	; () banked
  3289  00142C  5180               	movf	___wmul@multiplier& (0+255),w,b
  3290  00142E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3291  001430  CFF3 F084          	movff	prodl,___wmul@product
  3292  001434  CFF4 F085          	movff	prodh,___wmul@product+1
  3293  001438  5180               	movf	___wmul@multiplier& (0+255),w,b
  3294  00143A  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3295  00143C  50F3               	movf	prodl,w,c
  3296  00143E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3297  001440  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3298  001442  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3299  001444  50F3               	movf	prodl,w,c
  3300  001446  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303  001448  C084  F080         	movff	___wmul@product,?___wmul
  3304  00144C  C085  F081         	movff	___wmul@product+1,?___wmul+1
  3305                           
  3306                           ; BSR set to: 0
  3307  001450  0012               	return		;funcret
  3308  001452                     __end_of___wmul:
  3309                           	opt callstack 0
  3310                           
  3311 ;; *************** function _ISR *****************
  3312 ;; Defined at:
  3313 ;;		line 74 in file "Application/Application.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3327 ;;      Params:         0       0       0       0       0       0       0
  3328 ;;      Locals:         2       0       0       0       0       0       0
  3329 ;;      Temps:         16       0       0       0       0       0       0
  3330 ;;      Totals:        18       0       0       0       0       0       0
  3331 ;;Total ram usage:       18 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    4
  3334 ;; This function calls:
  3335 ;;		_USARTDataReady
  3336 ;;		_usartOccured
  3337 ;;		i2_getUsart
  3338 ;; This function is called by:
  3339 ;;		Interrupt level 2
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	intcode
  3344  000008                     __pintcode:
  3345                           	opt callstack 0
  3346  000008                     _ISR:
  3347                           	opt callstack 20
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;incstack = 0
  3351  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3352  00000A  EDD8  F005         	call	int_func,f	;refresh shadow registers
  3353                           
  3354                           	psect	intcode_body
  3355  000BB0                     __pintcode_body:
  3356                           	opt callstack 20
  3357  000BB0                     int_func:
  3358                           	opt callstack 20
  3359  000BB0  0006               	pop		; remove dummy address from shadow register refresh
  3360  000BB2  CFFA F039          	movff	pclath,??_ISR+2
  3361  000BB6  CFFB F03A          	movff	pclatu,??_ISR+3
  3362  000BBA  CFE9 F03B          	movff	fsr0l,??_ISR+4
  3363  000BBE  CFEA F03C          	movff	fsr0h,??_ISR+5
  3364  000BC2  CFE1 F03D          	movff	fsr1l,??_ISR+6
  3365  000BC6  CFE2 F03E          	movff	fsr1h,??_ISR+7
  3366  000BCA  CFD9 F03F          	movff	fsr2l,??_ISR+8
  3367  000BCE  CFDA F040          	movff	fsr2h,??_ISR+9
  3368  000BD2  CFF3 F041          	movff	prodl,??_ISR+10
  3369  000BD6  CFF4 F042          	movff	prodh,??_ISR+11
  3370  000BDA  CFF6 F043          	movff	tblptrl,??_ISR+12
  3371  000BDE  CFF7 F044          	movff	tblptrh,??_ISR+13
  3372  000BE2  CFF8 F045          	movff	tblptru,??_ISR+14
  3373  000BE6  CFF5 F046          	movff	tablat,??_ISR+15
  3374                           
  3375                           ;Application/Application.c: 76:     if (getUsart().isDataReady)
  3376  000BEA  EC85  F00A         	call	i2_getUsart	;wreg free
  3377  000BEE  50EE               	movf	postinc0,w,c
  3378  000BF0  10EE               	iorwf	postinc0,w,c
  3379  000BF2  B4D8               	btfsc	status,2,c
  3380  000BF4  D016               	goto	i2u210_49
  3381                           
  3382                           ;Application/Application.c: 77:     {;Application/Application.c: 78:         getUsart().
      +                          processor.process();
  3383  000BF6  EC85  F00A         	call	i2_getUsart	;wreg free
  3384  000BFA  0E02               	movlw	2
  3385  000BFC  26E9               	addwf	fsr0l,f,c
  3386  000BFE  0E00               	movlw	0
  3387  000C00  22EA               	addwfc	fsr0h,f,c
  3388  000C02  CFEE F047          	movff	postinc0,_ISR$1361
  3389  000C06  CFED F048          	movff	postdec0,_ISR$1361+1
  3390                           
  3391                           ;Application/Application.c: 77:     {;Application/Application.c: 78:         getUsart().
      +                          processor.process();
  3392  000C0A  D801               	call	i2u210_48
  3393  000C0C  D00A               	goto	i2u210_49
  3394  000C0E                     i2u210_48:
  3395  000C0E  0005               	push	
  3396  000C10  6EFA               	movwf	pclath,c
  3397  000C12  5047               	movf	_ISR$1361,w,c
  3398  000C14  6EFD               	movwf	tosl,c
  3399  000C16  5048               	movf	_ISR$1361+1,w,c
  3400  000C18  6EFE               	movwf	tosh,c
  3401  000C1A  50F8               	movf	tblptru,w,c
  3402  000C1C  6EFF               	movwf	tosu,c
  3403  000C1E  50FA               	movf	pclath,w,c
  3404  000C20  0012               	return		;indir
  3405  000C22                     i2u210_49:
  3406  000C22  C046  FFF5         	movff	??_ISR+15,tablat
  3407  000C26  C045  FFF8         	movff	??_ISR+14,tblptru
  3408  000C2A  C044  FFF7         	movff	??_ISR+13,tblptrh
  3409  000C2E  C043  FFF6         	movff	??_ISR+12,tblptrl
  3410  000C32  C042  FFF4         	movff	??_ISR+11,prodh
  3411  000C36  C041  FFF3         	movff	??_ISR+10,prodl
  3412  000C3A  C040  FFDA         	movff	??_ISR+9,fsr2h
  3413  000C3E  C03F  FFD9         	movff	??_ISR+8,fsr2l
  3414  000C42  C03E  FFE2         	movff	??_ISR+7,fsr1h
  3415  000C46  C03D  FFE1         	movff	??_ISR+6,fsr1l
  3416  000C4A  C03C  FFEA         	movff	??_ISR+5,fsr0h
  3417  000C4E  C03B  FFE9         	movff	??_ISR+4,fsr0l
  3418  000C52  C03A  FFFB         	movff	??_ISR+3,pclatu
  3419  000C56  C039  FFFA         	movff	??_ISR+2,pclath
  3420  000C5A  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3421  000C5C  0011               	retfie		f
  3422  000C5E                     __end_of_ISR:
  3423                           	opt callstack 0
  3424                           
  3425 ;; *************** function _usartOccured *****************
  3426 ;; Defined at:
  3427 ;;		line 58 in file "Application/Application.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  text           20   32[COMRAM] unsigned char [20]
  3432 ;;  i               2   52[COMRAM] int 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3442 ;;      Params:         0       0       0       0       0       0       0
  3443 ;;      Locals:        22       0       0       0       0       0       0
  3444 ;;      Temps:          2       0       0       0       0       0       0
  3445 ;;      Totals:        24       0       0       0       0       0       0
  3446 ;;Total ram usage:       24 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    3
  3449 ;; This function calls:
  3450 ;;		_USARTReadString
  3451 ;;		_atoi
  3452 ;;		i2_USARTWriteInt
  3453 ;;		i2_USARTWriteLine
  3454 ;;		i2_getUsart
  3455 ;; This function is called by:
  3456 ;;		_setProcessor
  3457 ;;		_ISR
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text30
  3462  000AEA                     __ptext30:
  3463                           	opt callstack 0
  3464  000AEA                     _usartOccured:
  3465                           	opt callstack 20
  3466                           
  3467                           ;Application/Application.c: 60:     if (getUsart().isDataReady) {
  3468                           
  3469                           ;incstack = 0
  3470  000AEA  EC85  F00A         	call	i2_getUsart	;wreg free
  3471  000AEE  50EE               	movf	postinc0,w,c
  3472  000AF0  10EE               	iorwf	postinc0,w,c
  3473  000AF2  B4D8               	btfsc	status,2,c
  3474  000AF4  0012               	return	
  3475                           
  3476                           ;Application/Application.c: 61:         char text[20] = "";
  3477  000AF6  EE20  F049         	lfsr	2,usartOccured@F2933
  3478  000AFA  EE10  F021         	lfsr	1,usartOccured@text
  3479  000AFE  0E13               	movlw	19
  3480  000B00                     i2u205_41:
  3481  000B00  CFDB FFE3          	movff	plusw2,plusw1
  3482  000B04  06E8               	decf	wreg,f,c
  3483  000B06  E2FC               	bc	i2u205_41
  3484                           
  3485                           ;Application/Application.c: 62:         getUsart().readString(text, 20);
  3486  000B08  0E21               	movlw	low usartOccured@text
  3487  000B0A  6E13               	movwf	USARTReadString@buf,c
  3488  000B0C  0E00               	movlw	high usartOccured@text
  3489  000B0E  6E14               	movwf	USARTReadString@buf+1,c
  3490  000B10  0E00               	movlw	0
  3491  000B12  6E16               	movwf	USARTReadString@max_length+1,c
  3492  000B14  0E14               	movlw	20
  3493  000B16  6E15               	movwf	USARTReadString@max_length,c
  3494  000B18  EC85  F00A         	call	i2_getUsart	;wreg free
  3495  000B1C  0E06               	movlw	6
  3496  000B1E  26E9               	addwf	fsr0l,f,c
  3497  000B20  0E00               	movlw	0
  3498  000B22  22EA               	addwfc	fsr0h,f,c
  3499  000B24  D801               	call	i2u206_48
  3500  000B26  D00A               	goto	i2u206_49
  3501  000B28                     i2u206_48:
  3502  000B28  0005               	push	
  3503  000B2A  6EFA               	movwf	pclath,c
  3504  000B2C  50EE               	movf	postinc0,w,c
  3505  000B2E  6EFD               	movwf	tosl,c
  3506  000B30  50EE               	movf	postinc0,w,c
  3507  000B32  6EFE               	movwf	tosh,c
  3508  000B34  50F8               	movf	tblptru,w,c
  3509  000B36  6EFF               	movwf	tosu,c
  3510  000B38  50FA               	movf	pclath,w,c
  3511  000B3A  0012               	return		;indir
  3512  000B3C                     i2u206_49:
  3513                           
  3514                           ;Application/Application.c: 64:         int i = atoi(text);
  3515  000B3C  0E21               	movlw	low usartOccured@text
  3516  000B3E  6E08               	movwf	atoi@s,c
  3517  000B40  0E00               	movlw	high usartOccured@text
  3518  000B42  6E09               	movwf	atoi@s+1,c
  3519  000B44  EC03  F003         	call	_atoi	;wreg free
  3520  000B48  C008  F035         	movff	?_atoi,usartOccured@i
  3521  000B4C  C009  F036         	movff	?_atoi+1,usartOccured@i+1
  3522                           
  3523                           ;Application/Application.c: 66:         LATB = i;
  3524  000B50  C035  FF8A         	movff	usartOccured@i,3978	;volatile
  3525                           
  3526                           ;Application/Application.c: 68:         getUsart().writeInt(i, 3);
  3527  000B54  C035  F009         	movff	usartOccured@i,i2USARTWriteInt@val
  3528  000B58  C036  F00A         	movff	usartOccured@i+1,i2USARTWriteInt@val+1
  3529  000B5C  0E03               	movlw	3
  3530  000B5E  6E0B               	movwf	i2USARTWriteInt@field_length,c
  3531  000B60  EC85  F00A         	call	i2_getUsart	;wreg free
  3532  000B64  0E0E               	movlw	14
  3533  000B66  26E9               	addwf	fsr0l,f,c
  3534  000B68  0E00               	movlw	0
  3535  000B6A  22EA               	addwfc	fsr0h,f,c
  3536  000B6C  D801               	call	i2u207_48
  3537  000B6E  D00A               	goto	i2u207_49
  3538  000B70                     i2u207_48:
  3539  000B70  0005               	push	
  3540  000B72  6EFA               	movwf	pclath,c
  3541  000B74  50EE               	movf	postinc0,w,c
  3542  000B76  6EFD               	movwf	tosl,c
  3543  000B78  50EE               	movf	postinc0,w,c
  3544  000B7A  6EFE               	movwf	tosh,c
  3545  000B7C  50F8               	movf	tblptru,w,c
  3546  000B7E  6EFF               	movwf	tosu,c
  3547  000B80  50FA               	movf	pclath,w,c
  3548  000B82  0012               	return		;indir
  3549  000B84                     i2u207_49:
  3550                           
  3551                           ;Application/Application.c: 69:         getUsart().writeLine("");
  3552  000B84  0E03               	movlw	low (STR_3+2)
  3553  000B86  6E03               	movwf	i2USARTWriteLine@ln,c
  3554  000B88  0E06               	movlw	high (STR_3+2)
  3555  000B8A  6E04               	movwf	i2USARTWriteLine@ln+1,c
  3556  000B8C  EC85  F00A         	call	i2_getUsart	;wreg free
  3557  000B90  0E0C               	movlw	12
  3558  000B92  26E9               	addwf	fsr0l,f,c
  3559  000B94  0E00               	movlw	0
  3560  000B96  22EA               	addwfc	fsr0h,f,c
  3561  000B98  D801               	call	i2u208_48
  3562  000B9A  0012               	return	
  3563  000B9C                     i2u208_48:
  3564  000B9C  0005               	push	
  3565  000B9E  6EFA               	movwf	pclath,c
  3566  000BA0  50EE               	movf	postinc0,w,c
  3567  000BA2  6EFD               	movwf	tosl,c
  3568  000BA4  50EE               	movf	postinc0,w,c
  3569  000BA6  6EFE               	movwf	tosh,c
  3570  000BA8  50F8               	movf	tblptru,w,c
  3571  000BAA  6EFF               	movwf	tosu,c
  3572  000BAC  50FA               	movf	pclath,w,c
  3573  000BAE  0012               	return		;indir
  3574  000BB0                     __end_of_usartOccured:
  3575                           	opt callstack 0
  3576                           
  3577 ;; *************** function i2_getUsart *****************
  3578 ;; Defined at:
  3579 ;;		line 28 in file "usart/Usart.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  18    0[COMRAM] struct .
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3593 ;;      Params:        18       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0
  3596 ;;      Totals:        18       0       0       0       0       0       0
  3597 ;;Total ram usage:       18 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_usartOccured
  3603 ;;		_ISR
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	text31
  3608  00150A                     __ptext31:
  3609                           	opt callstack 0
  3610  00150A                     i2_getUsart:
  3611                           	opt callstack 23
  3612                           
  3613                           ;usart/Usart.c: 29:     return *applicationUsart;
  3614                           
  3615                           ;incstack = 0
  3616  00150A  C0E3  FFD9         	movff	_applicationUsart,fsr2l
  3617  00150E  C0E4  FFDA         	movff	_applicationUsart+1,fsr2h
  3618  001512  EE00  F001         	lfsr	0,?i2_getUsart
  3619  001516  0E11               	movlw	17
  3620  001518                     i2u187_41:
  3621  001518  CFDB FFEB          	movff	plusw2,plusw0
  3622  00151C  06E8               	decf	wreg,f,c
  3623  00151E  E2FC               	bc	i2u187_41
  3624  001520  0012               	return		;funcret
  3625  001522                     __end_ofi2_getUsart:
  3626                           	opt callstack 0
  3627                           
  3628 ;; *************** function i2_USARTWriteLine *****************
  3629 ;; Defined at:
  3630 ;;		line 91 in file "usart/UsartFunctions.h"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  ln              2    2[COMRAM] PTR const unsigned char 
  3633 ;;		 -> STR_2(1), STR_1(1), 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3645 ;;      Params:         2       0       0       0       0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0
  3648 ;;      Totals:         2       0       0       0       0       0       0
  3649 ;;Total ram usage:        2 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    1
  3652 ;; This function calls:
  3653 ;;		i2_USARTWriteString
  3654 ;; This function is called by:
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text32
  3659  0014C0                     __ptext32:
  3660                           	opt callstack 0
  3661  0014C0                     i2_USARTWriteLine:
  3662                           	opt callstack 21
  3663                           
  3664                           ;usart/UsartFunctions.h: 92:     USARTWriteString(ln);
  3665                           
  3666                           ;incstack = 0
  3667  0014C0  C003  F001         	movff	i2USARTWriteLine@ln,i2USARTWriteString@str
  3668  0014C4  C004  F002         	movff	i2USARTWriteLine@ln+1,i2USARTWriteString@str+1
  3669  0014C8  ECFF  F009         	call	i2_USARTWriteString	;wreg free
  3670                           
  3671                           ;usart/UsartFunctions.h: 93:     USARTWriteString("\r\n");
  3672  0014CC  0E01               	movlw	low STR_3
  3673  0014CE  6E01               	movwf	i2USARTWriteString@str,c
  3674  0014D0  0E06               	movlw	high STR_3
  3675  0014D2  6E02               	movwf	i2USARTWriteString@str+1,c
  3676  0014D4  ECFF  F009         	call	i2_USARTWriteString	;wreg free
  3677  0014D8  0012               	return		;funcret
  3678  0014DA                     __end_ofi2_USARTWriteLine:
  3679                           	opt callstack 0
  3680                           
  3681 ;; *************** function i2_USARTWriteString *****************
  3682 ;; Defined at:
  3683 ;;		line 69 in file "usart/UsartFunctions.h"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;  str             2    0[COMRAM] PTR const unsigned char 
  3686 ;;		 -> STR_5(3), STR_4(3), STR_3(3), STR_2(1), 
  3687 ;;		 -> STR_1(1), 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;		None
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3699 ;;      Params:         2       0       0       0       0       0       0
  3700 ;;      Locals:         0       0       0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0
  3702 ;;      Totals:         2       0       0       0       0       0       0
  3703 ;;Total ram usage:        2 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		i2_USARTWriteLine
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text33
  3713  0013FE                     __ptext33:
  3714                           	opt callstack 0
  3715  0013FE                     i2_USARTWriteString:
  3716                           	opt callstack 21
  3717                           
  3718                           ;usart/UsartFunctions.h: 70:     while ((*str) != '\0') {
  3719                           
  3720                           ;incstack = 0
  3721  0013FE  D00B               	goto	i2l1872
  3722  001400                     i2l183:
  3723  001400  A89E               	btfss	3998,4,c	;volatile
  3724  001402  D7FE               	goto	i2l183
  3725                           
  3726                           ;usart/UsartFunctions.h: 75:         TXREG = (*str);
  3727  001404  C001  FFF6         	movff	i2USARTWriteString@str,tblptrl
  3728  001408  C002  FFF7         	movff	i2USARTWriteString@str+1,tblptrh
  3729  00140C                     	if	0	;tblptru may be non-zero
  3730  00140C                     	endif
  3731  00140C                     	if	0	;tblptru may be non-zero
  3732  00140C                     	endif
  3733  00140C  0008               	tblrd		*
  3734  00140E  CFF5 FFAD          	movff	tablat,4013	;volatile
  3735                           
  3736                           ;usart/UsartFunctions.h: 78:         str++;
  3737  001412  4A01               	infsnz	i2USARTWriteString@str,f,c
  3738  001414  2A02               	incf	i2USARTWriteString@str+1,f,c
  3739  001416                     i2l1872:
  3740                           
  3741                           ;usart/UsartFunctions.h: 70:     while ((*str) != '\0') {
  3742  001416  C001  FFF6         	movff	i2USARTWriteString@str,tblptrl
  3743  00141A  C002  FFF7         	movff	i2USARTWriteString@str+1,tblptrh
  3744  00141E                     	if	0	;tblptru may be non-zero
  3745  00141E                     	endif
  3746  00141E                     	if	0	;tblptru may be non-zero
  3747  00141E                     	endif
  3748  00141E  0008               	tblrd		*
  3749  001420  50F5               	movf	tablat,w,c
  3750  001422  0900               	iorlw	0
  3751  001424  B4D8               	btfsc	status,2,c
  3752  001426  0012               	return	
  3753  001428  D7EB               	goto	i2l183
  3754  00142A                     __end_ofi2_USARTWriteString:
  3755                           	opt callstack 0
  3756                           
  3757 ;; *************** function i2_USARTWriteInt *****************
  3758 ;; Defined at:
  3759 ;;		line 96 in file "usart/UsartFunctions.h"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  val             2    8[COMRAM] int 
  3762 ;;  field_length    1   10[COMRAM] unsigned char 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  USARTWriteIn    5   11[COMRAM] unsigned char [5]
  3765 ;;  USARTWriteIn    2   18[COMRAM] int 
  3766 ;;  USARTWriteIn    2   16[COMRAM] int 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3776 ;;      Params:         3       0       0       0       0       0       0
  3777 ;;      Locals:         9       0       0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0       0       0
  3779 ;;      Totals:        12       0       0       0       0       0       0
  3780 ;;Total ram usage:       12 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    1
  3783 ;; This function calls:
  3784 ;;		i2_USARTWriteByte
  3785 ;;		i2___awdiv
  3786 ;;		i2___awmod
  3787 ;; This function is called by:
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text34
  3792  000842                     __ptext34:
  3793                           	opt callstack 0
  3794  000842                     i2_USARTWriteInt:
  3795                           	opt callstack 21
  3796                           
  3797                           ;usart/UsartFunctions.h: 97:     if (val < 0) {
  3798                           
  3799                           ;incstack = 0
  3800  000842  AE0A               	btfss	i2USARTWriteInt@val+1,7,c
  3801  000844  D007               	goto	i2l2078
  3802                           
  3803                           ;usart/UsartFunctions.h: 98:         USARTWriteByte('-');
  3804  000846  0E2D               	movlw	45
  3805  000848  ECC0  F00A         	call	i2_USARTWriteByte
  3806                           
  3807                           ;usart/UsartFunctions.h: 99:         val = (val * (-1));
  3808  00084C  6C09               	negf	i2USARTWriteInt@val,c
  3809  00084E  1E0A               	comf	i2USARTWriteInt@val+1,f,c
  3810  000850  B0D8               	btfsc	status,0,c
  3811  000852  2A0A               	incf	i2USARTWriteInt@val+1,f,c
  3812  000854                     i2l2078:
  3813                           
  3814                           ;usart/UsartFunctions.h: 103:     char str[5] = {0, 0, 0, 0, 0};
  3815  000854  EE20  F0CE         	lfsr	2,USARTWriteInt@F2935
  3816  000858  EE10  F00C         	lfsr	1,i2USARTWriteInt@str
  3817  00085C  0E04               	movlw	4
  3818  00085E                     i2u181_41:
  3819  00085E  CFDB FFE3          	movff	plusw2,plusw1
  3820  000862  06E8               	decf	wreg,f,c
  3821  000864  E2FC               	bc	i2u181_41
  3822                           
  3823                           ;usart/UsartFunctions.h: 104:     int i = 4, j = 0;
  3824  000866  0E00               	movlw	0
  3825  000868  6E14               	movwf	i2USARTWriteInt@i+1,c
  3826  00086A  0E04               	movlw	4
  3827  00086C  6E13               	movwf	i2USARTWriteInt@i,c
  3828  00086E  0E00               	movlw	0
  3829  000870  6E12               	movwf	i2USARTWriteInt@j+1,c
  3830  000872  0E00               	movlw	0
  3831  000874  6E11               	movwf	i2USARTWriteInt@j,c
  3832                           
  3833                           ;usart/UsartFunctions.h: 105:     while (val) {
  3834  000876  D023               	goto	i2l2090
  3835  000878                     i2l2084:
  3836                           
  3837                           ;usart/UsartFunctions.h: 106:         str[i] = val % 10;
  3838  000878  0E0C               	movlw	low i2USARTWriteInt@str
  3839  00087A  2413               	addwf	i2USARTWriteInt@i,w,c
  3840  00087C  6ED9               	movwf	fsr2l,c
  3841  00087E  0E00               	movlw	high i2USARTWriteInt@str
  3842  000880  2014               	addwfc	i2USARTWriteInt@i+1,w,c
  3843  000882  6EDA               	movwf	fsr2h,c
  3844  000884  C009  F001         	movff	i2USARTWriteInt@val,i2___awmod@dividend
  3845  000888  C00A  F002         	movff	i2USARTWriteInt@val+1,i2___awmod@dividend+1
  3846  00088C  0E00               	movlw	0
  3847  00088E  6E04               	movwf	i2___awmod@divisor+1,c
  3848  000890  0E0A               	movlw	10
  3849  000892  6E03               	movwf	i2___awmod@divisor,c
  3850  000894  EC7E  F008         	call	i2___awmod	;wreg free
  3851  000898  5001               	movf	?i2___awmod,w,c
  3852  00089A  6EDF               	movwf	indf2,c
  3853                           
  3854                           ;usart/UsartFunctions.h: 107:         val = val / 10;
  3855  00089C  C009  F001         	movff	i2USARTWriteInt@val,i2___awdiv@dividend
  3856  0008A0  C00A  F002         	movff	i2USARTWriteInt@val+1,i2___awdiv@dividend+1
  3857  0008A4  0E00               	movlw	0
  3858  0008A6  6E04               	movwf	i2___awdiv@divisor+1,c
  3859  0008A8  0E0A               	movlw	10
  3860  0008AA  6E03               	movwf	i2___awdiv@divisor,c
  3861  0008AC  EC50  F007         	call	i2___awdiv	;wreg free
  3862  0008B0  C001  F009         	movff	?i2___awdiv,i2USARTWriteInt@val
  3863  0008B4  C002  F00A         	movff	?i2___awdiv+1,i2USARTWriteInt@val+1
  3864                           
  3865                           ;usart/UsartFunctions.h: 108:         i--;
  3866  0008B8  0613               	decf	i2USARTWriteInt@i,f,c
  3867  0008BA  A0D8               	btfss	status,0,c
  3868  0008BC  0614               	decf	i2USARTWriteInt@i+1,f,c
  3869  0008BE                     i2l2090:
  3870                           
  3871                           ;usart/UsartFunctions.h: 105:     while (val) {
  3872  0008BE  5009               	movf	i2USARTWriteInt@val,w,c
  3873  0008C0  100A               	iorwf	i2USARTWriteInt@val+1,w,c
  3874  0008C2  A4D8               	btfss	status,2,c
  3875  0008C4  D7D9               	goto	i2l2084
  3876                           
  3877                           ;usart/UsartFunctions.h: 110:     if (field_length > 5)
  3878  0008C6  0E05               	movlw	5
  3879  0008C8  640B               	cpfsgt	i2USARTWriteInt@field_length,c
  3880  0008CA  D00D               	goto	i2l2100
  3881  0008CC  D002               	goto	i2l2098
  3882  0008CE                     i2l2096:
  3883  0008CE  4A11               	infsnz	i2USARTWriteInt@j,f,c
  3884  0008D0  2A12               	incf	i2USARTWriteInt@j+1,f,c
  3885  0008D2                     i2l2098:
  3886  0008D2  0E0C               	movlw	low i2USARTWriteInt@str
  3887  0008D4  2411               	addwf	i2USARTWriteInt@j,w,c
  3888  0008D6  6ED9               	movwf	fsr2l,c
  3889  0008D8  0E00               	movlw	high i2USARTWriteInt@str
  3890  0008DA  2012               	addwfc	i2USARTWriteInt@j+1,w,c
  3891  0008DC  6EDA               	movwf	fsr2h,c
  3892  0008DE  50DF               	movf	indf2,w,c
  3893  0008E0  A4D8               	btfss	status,2,c
  3894  0008E2  D009               	goto	i2l2102
  3895  0008E4  D7F4               	goto	i2l2096
  3896  0008E6                     i2l2100:
  3897                           
  3898                           ;usart/UsartFunctions.h: 113:         j = 5 - field_length;
  3899  0008E6  500B               	movf	i2USARTWriteInt@field_length,w,c
  3900  0008E8  0805               	sublw	5
  3901  0008EA  6E11               	movwf	i2USARTWriteInt@j,c
  3902  0008EC  0E00               	movlw	0
  3903  0008EE  A0D8               	btfss	status,0,c
  3904  0008F0  2AE8               	incf	wreg,f,c
  3905  0008F2  0800               	sublw	0
  3906  0008F4  6E12               	movwf	i2USARTWriteInt@j+1,c
  3907  0008F6                     i2l2102:
  3908                           
  3909                           ;usart/UsartFunctions.h: 115:     for (i = j; i < 5; i++) {
  3910  0008F6  C011  F013         	movff	i2USARTWriteInt@j,i2USARTWriteInt@i
  3911  0008FA  C012  F014         	movff	i2USARTWriteInt@j+1,i2USARTWriteInt@i+1
  3912  0008FE  BE14               	btfsc	i2USARTWriteInt@i+1,7,c
  3913  000900  D003               	goto	i2l2106
  3914  000902  5014               	movf	i2USARTWriteInt@i+1,w,c
  3915  000904  E116               	bnz	i2l206
  3916  000906  D010               	goto	L2
  3917  000908                     i2l2106:
  3918                           
  3919                           ;usart/UsartFunctions.h: 116:         USARTWriteByte('0' + str[i] );
  3920  000908  0E0C               	movlw	low i2USARTWriteInt@str
  3921  00090A  2413               	addwf	i2USARTWriteInt@i,w,c
  3922  00090C  6ED9               	movwf	fsr2l,c
  3923  00090E  0E00               	movlw	high i2USARTWriteInt@str
  3924  000910  2014               	addwfc	i2USARTWriteInt@i+1,w,c
  3925  000912  6EDA               	movwf	fsr2h,c
  3926  000914  50DF               	movf	indf2,w,c
  3927  000916  0F30               	addlw	48
  3928  000918  ECC0  F00A         	call	i2_USARTWriteByte
  3929                           
  3930                           ;usart/UsartFunctions.h: 117:     }
  3931  00091C  4A13               	infsnz	i2USARTWriteInt@i,f,c
  3932  00091E  2A14               	incf	i2USARTWriteInt@i+1,f,c
  3933  000920  BE14               	btfsc	i2USARTWriteInt@i+1,7,c
  3934  000922  D7F2               	goto	i2l2106
  3935  000924  5014               	movf	i2USARTWriteInt@i+1,w,c
  3936  000926  E105               	bnz	i2u186_40
  3937  000928                     L2:
  3938  000928  0E05               	movlw	5
  3939  00092A  5C13               	subwf	i2USARTWriteInt@i,w,c
  3940  00092C  B0D8               	btfsc	status,0,c
  3941  00092E  0012               	return	
  3942  000930  D7EB               	goto	i2l2106
  3943  000932                     i2u186_40:
  3944  000932                     i2l206:
  3945  000932  0012               	return		;funcret
  3946  000934                     __end_ofi2_USARTWriteInt:
  3947                           	opt callstack 0
  3948                           
  3949 ;; *************** function i2___awmod *****************
  3950 ;; Defined at:
  3951 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  dividend        2    0[COMRAM] int 
  3954 ;;  divisor         2    2[COMRAM] int 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  __awmod         1    5[COMRAM] unsigned char 
  3957 ;;  __awmod         1    4[COMRAM] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  2    0[COMRAM] int 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3967 ;;      Params:         4       0       0       0       0       0       0
  3968 ;;      Locals:         2       0       0       0       0       0       0
  3969 ;;      Temps:          0       0       0       0       0       0       0
  3970 ;;      Totals:         6       0       0       0       0       0       0
  3971 ;;Total ram usage:        6 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		i2_USARTWriteInt
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text35
  3981  0010FC                     __ptext35:
  3982                           	opt callstack 0
  3983  0010FC                     i2___awmod:
  3984                           	opt callstack 21
  3985                           
  3986                           ;incstack = 0
  3987  0010FC  0E00               	movlw	0
  3988  0010FE  6E06               	movwf	i2___awmod@sign,c
  3989  001100  AE02               	btfss	i2___awmod@dividend+1,7,c
  3990  001102  D006               	goto	i2l1926
  3991  001104  6C01               	negf	i2___awmod@dividend,c
  3992  001106  1E02               	comf	i2___awmod@dividend+1,f,c
  3993  001108  B0D8               	btfsc	status,0,c
  3994  00110A  2A02               	incf	i2___awmod@dividend+1,f,c
  3995  00110C  0E01               	movlw	1
  3996  00110E  6E06               	movwf	i2___awmod@sign,c
  3997  001110                     i2l1926:
  3998  001110  AE04               	btfss	i2___awmod@divisor+1,7,c
  3999  001112  D004               	goto	i2l1930
  4000  001114  6C03               	negf	i2___awmod@divisor,c
  4001  001116  1E04               	comf	i2___awmod@divisor+1,f,c
  4002  001118  B0D8               	btfsc	status,0,c
  4003  00111A  2A04               	incf	i2___awmod@divisor+1,f,c
  4004  00111C                     i2l1930:
  4005  00111C  5003               	movf	i2___awmod@divisor,w,c
  4006  00111E  1004               	iorwf	i2___awmod@divisor+1,w,c
  4007  001120  B4D8               	btfsc	status,2,c
  4008  001122  D018               	goto	i2l1946
  4009  001124  0E01               	movlw	1
  4010  001126  6E05               	movwf	i2___awmod@counter,c
  4011  001128  D004               	goto	i2l1936
  4012  00112A                     i2l1934:
  4013  00112A  90D8               	bcf	status,0,c
  4014  00112C  3603               	rlcf	i2___awmod@divisor,f,c
  4015  00112E  3604               	rlcf	i2___awmod@divisor+1,f,c
  4016  001130  2A05               	incf	i2___awmod@counter,f,c
  4017  001132                     i2l1936:
  4018  001132  AE04               	btfss	i2___awmod@divisor+1,7,c
  4019  001134  D7FA               	goto	i2l1934
  4020  001136                     i2u161_40:
  4021  001136  5003               	movf	i2___awmod@divisor,w,c
  4022  001138  5C01               	subwf	i2___awmod@dividend,w,c
  4023  00113A  5004               	movf	i2___awmod@divisor+1,w,c
  4024  00113C  5802               	subwfb	i2___awmod@dividend+1,w,c
  4025  00113E  A0D8               	btfss	status,0,c
  4026  001140  D004               	goto	i2l1942
  4027  001142  5003               	movf	i2___awmod@divisor,w,c
  4028  001144  5E01               	subwf	i2___awmod@dividend,f,c
  4029  001146  5004               	movf	i2___awmod@divisor+1,w,c
  4030  001148  5A02               	subwfb	i2___awmod@dividend+1,f,c
  4031  00114A                     i2l1942:
  4032  00114A  90D8               	bcf	status,0,c
  4033  00114C  3204               	rrcf	i2___awmod@divisor+1,f,c
  4034  00114E  3203               	rrcf	i2___awmod@divisor,f,c
  4035  001150  2E05               	decfsz	i2___awmod@counter,f,c
  4036  001152  D7F1               	goto	i2u161_40
  4037  001154                     i2l1946:
  4038  001154  5006               	movf	i2___awmod@sign,w,c
  4039  001156  B4D8               	btfsc	status,2,c
  4040  001158  D004               	goto	i2l1950
  4041  00115A  6C01               	negf	i2___awmod@dividend,c
  4042  00115C  1E02               	comf	i2___awmod@dividend+1,f,c
  4043  00115E  B0D8               	btfsc	status,0,c
  4044  001160  2A02               	incf	i2___awmod@dividend+1,f,c
  4045  001162                     i2l1950:
  4046  001162  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4047  001166  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4048  00116A  0012               	return		;funcret
  4049  00116C                     __end_ofi2___awmod:
  4050                           	opt callstack 0
  4051                           
  4052 ;; *************** function i2___awdiv *****************
  4053 ;; Defined at:
  4054 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  dividend        2    0[COMRAM] int 
  4057 ;;  divisor         2    2[COMRAM] int 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  __awdiv         2    6[COMRAM] int 
  4060 ;;  __awdiv         1    5[COMRAM] unsigned char 
  4061 ;;  __awdiv         1    4[COMRAM] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  2    0[COMRAM] int 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4071 ;;      Params:         4       0       0       0       0       0       0
  4072 ;;      Locals:         4       0       0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0
  4074 ;;      Totals:         8       0       0       0       0       0       0
  4075 ;;Total ram usage:        8 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		i2_USARTWriteInt
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text36
  4085  000EA0                     __ptext36:
  4086                           	opt callstack 0
  4087  000EA0                     i2___awdiv:
  4088                           	opt callstack 21
  4089                           
  4090                           ;incstack = 0
  4091  000EA0  0E00               	movlw	0
  4092  000EA2  6E06               	movwf	i2___awdiv@sign,c
  4093  000EA4  AE04               	btfss	i2___awdiv@divisor+1,7,c
  4094  000EA6  D006               	goto	i2l1882
  4095  000EA8  6C03               	negf	i2___awdiv@divisor,c
  4096  000EAA  1E04               	comf	i2___awdiv@divisor+1,f,c
  4097  000EAC  B0D8               	btfsc	status,0,c
  4098  000EAE  2A04               	incf	i2___awdiv@divisor+1,f,c
  4099  000EB0  0E01               	movlw	1
  4100  000EB2  6E06               	movwf	i2___awdiv@sign,c
  4101  000EB4                     i2l1882:
  4102  000EB4  AE02               	btfss	i2___awdiv@dividend+1,7,c
  4103  000EB6  D006               	goto	i2l1888
  4104  000EB8  6C01               	negf	i2___awdiv@dividend,c
  4105  000EBA  1E02               	comf	i2___awdiv@dividend+1,f,c
  4106  000EBC  B0D8               	btfsc	status,0,c
  4107  000EBE  2A02               	incf	i2___awdiv@dividend+1,f,c
  4108  000EC0  0E01               	movlw	1
  4109  000EC2  1A06               	xorwf	i2___awdiv@sign,f,c
  4110  000EC4                     i2l1888:
  4111  000EC4  0E00               	movlw	0
  4112  000EC6  6E08               	movwf	i2___awdiv@quotient+1,c
  4113  000EC8  0E00               	movlw	0
  4114  000ECA  6E07               	movwf	i2___awdiv@quotient,c
  4115  000ECC  5003               	movf	i2___awdiv@divisor,w,c
  4116  000ECE  1004               	iorwf	i2___awdiv@divisor+1,w,c
  4117  000ED0  B4D8               	btfsc	status,2,c
  4118  000ED2  D01C               	goto	i2l1910
  4119  000ED4  0E01               	movlw	1
  4120  000ED6  6E05               	movwf	i2___awdiv@counter,c
  4121  000ED8  D004               	goto	i2l1896
  4122  000EDA                     i2l1894:
  4123  000EDA  90D8               	bcf	status,0,c
  4124  000EDC  3603               	rlcf	i2___awdiv@divisor,f,c
  4125  000EDE  3604               	rlcf	i2___awdiv@divisor+1,f,c
  4126  000EE0  2A05               	incf	i2___awdiv@counter,f,c
  4127  000EE2                     i2l1896:
  4128  000EE2  AE04               	btfss	i2___awdiv@divisor+1,7,c
  4129  000EE4  D7FA               	goto	i2l1894
  4130  000EE6                     i2u155_40:
  4131  000EE6  90D8               	bcf	status,0,c
  4132  000EE8  3607               	rlcf	i2___awdiv@quotient,f,c
  4133  000EEA  3608               	rlcf	i2___awdiv@quotient+1,f,c
  4134  000EEC  5003               	movf	i2___awdiv@divisor,w,c
  4135  000EEE  5C01               	subwf	i2___awdiv@dividend,w,c
  4136  000EF0  5004               	movf	i2___awdiv@divisor+1,w,c
  4137  000EF2  5802               	subwfb	i2___awdiv@dividend+1,w,c
  4138  000EF4  A0D8               	btfss	status,0,c
  4139  000EF6  D005               	goto	i2l1906
  4140  000EF8  5003               	movf	i2___awdiv@divisor,w,c
  4141  000EFA  5E01               	subwf	i2___awdiv@dividend,f,c
  4142  000EFC  5004               	movf	i2___awdiv@divisor+1,w,c
  4143  000EFE  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  4144  000F00  8007               	bsf	i2___awdiv@quotient,0,c
  4145  000F02                     i2l1906:
  4146  000F02  90D8               	bcf	status,0,c
  4147  000F04  3204               	rrcf	i2___awdiv@divisor+1,f,c
  4148  000F06  3203               	rrcf	i2___awdiv@divisor,f,c
  4149  000F08  2E05               	decfsz	i2___awdiv@counter,f,c
  4150  000F0A  D7ED               	goto	i2u155_40
  4151  000F0C                     i2l1910:
  4152  000F0C  5006               	movf	i2___awdiv@sign,w,c
  4153  000F0E  B4D8               	btfsc	status,2,c
  4154  000F10  D004               	goto	i2l1914
  4155  000F12  6C07               	negf	i2___awdiv@quotient,c
  4156  000F14  1E08               	comf	i2___awdiv@quotient+1,f,c
  4157  000F16  B0D8               	btfsc	status,0,c
  4158  000F18  2A08               	incf	i2___awdiv@quotient+1,f,c
  4159  000F1A                     i2l1914:
  4160  000F1A  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  4161  000F1E  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  4162  000F22  0012               	return		;funcret
  4163  000F24                     __end_ofi2___awdiv:
  4164                           	opt callstack 0
  4165                           
  4166 ;; *************** function i2_USARTWriteByte *****************
  4167 ;; Defined at:
  4168 ;;		line 61 in file "usart/UsartFunctions.h"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  ch              1    wreg     unsigned char 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  ch              1    0[COMRAM] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4182 ;;      Params:         0       0       0       0       0       0       0
  4183 ;;      Locals:         1       0       0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0
  4185 ;;      Totals:         1       0       0       0       0       0       0
  4186 ;;Total ram usage:        1 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		i2_USARTWriteInt
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text37
  4196  001580                     __ptext37:
  4197                           	opt callstack 0
  4198  001580                     i2_USARTWriteByte:
  4199                           	opt callstack 21
  4200                           
  4201                           ;incstack = 0
  4202                           ;i2USARTWriteByte@ch stored from wreg
  4203  001580  6E01               	movwf	i2USARTWriteByte@ch,c
  4204  001582                     
  4205                           ;usart/UsartFunctions.h: 63:     while (!TXIF);
  4206  001582  A89E               	btfss	3998,4,c	;volatile
  4207  001584  D7FE               	goto	i2l1862
  4208                           
  4209                           ;usart/UsartFunctions.h: 66:     TXREG = ch;
  4210  001586  C001  FFAD         	movff	i2USARTWriteByte@ch,4013	;volatile
  4211  00158A  0012               	return		;funcret
  4212  00158C                     __end_ofi2_USARTWriteByte:
  4213                           	opt callstack 0
  4214                           
  4215 ;; *************** function _atoi *****************
  4216 ;; Defined at:
  4217 ;;		line 4 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  s               2    7[COMRAM] PTR const unsigned char 
  4220 ;;		 -> usartOccured@text(20), 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  n               2   20[COMRAM] int 
  4223 ;;  neg             2   13[COMRAM] int 
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  2    7[COMRAM] int 
  4226 ;; Registers used:
  4227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4233 ;;      Params:         2       0       0       0       0       0       0
  4234 ;;      Locals:         9       0       0       0       0       0       0
  4235 ;;      Temps:          4       0       0       0       0       0       0
  4236 ;;      Totals:        15       0       0       0       0       0       0
  4237 ;;Total ram usage:       15 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    1
  4240 ;; This function calls:
  4241 ;;		_isdigit
  4242 ;;		_isspace
  4243 ;;		i2___wmul
  4244 ;; This function is called by:
  4245 ;;		_usartOccured
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text38
  4250  000606                     __ptext38:
  4251                           	opt callstack 0
  4252  000606                     _atoi:
  4253                           	opt callstack 21
  4254                           
  4255                           ;incstack = 0
  4256  000606  0E00               	movlw	0
  4257  000608  6E16               	movwf	atoi@n+1,c
  4258  00060A  0E00               	movlw	0
  4259  00060C  6E15               	movwf	atoi@n,c
  4260  00060E  0E00               	movlw	0
  4261  000610  6E0F               	movwf	atoi@neg+1,c
  4262  000612  0E00               	movlw	0
  4263  000614  6E0E               	movwf	atoi@neg,c
  4264  000616  D002               	goto	i2l2192
  4265  000618                     i2l2190:
  4266  000618  4A08               	infsnz	atoi@s,f,c
  4267  00061A  2A09               	incf	atoi@s+1,f,c
  4268  00061C                     i2l2192:
  4269  00061C  0E01               	movlw	1
  4270  00061E  6E14               	movwf	_atoi$1043,c
  4271  000620  C008  FFD9         	movff	atoi@s,fsr2l
  4272  000624  C009  FFDA         	movff	atoi@s+1,fsr2h
  4273  000628  0E20               	movlw	32
  4274  00062A  18DE               	xorwf	postinc2,w,c
  4275  00062C  B4D8               	btfsc	status,2,c
  4276  00062E  D017               	goto	i2l2200
  4277  000630  0EF7               	movlw	247
  4278  000632  6E0A               	movwf	??_atoi& (0+255),c
  4279  000634  0EFF               	movlw	255
  4280  000636  6E0B               	movwf	(??_atoi+1)& (0+255),c
  4281  000638  C008  FFD9         	movff	atoi@s,fsr2l
  4282  00063C  C009  FFDA         	movff	atoi@s+1,fsr2h
  4283  000640  50DF               	movf	indf2,w,c
  4284  000642  6E0C               	movwf	(??_atoi+2)& (0+255),c
  4285  000644  6A0D               	clrf	(??_atoi+3)& (0+255),c
  4286  000646  500A               	movf	??_atoi,w,c
  4287  000648  260C               	addwf	??_atoi+2,f,c
  4288  00064A  500B               	movf	??_atoi+1,w,c
  4289  00064C  220D               	addwfc	??_atoi+3,f,c
  4290  00064E  500D               	movf	??_atoi+3,w,c
  4291  000650  E104               	bnz	i2u197_40
  4292  000652  0E05               	movlw	5
  4293  000654  5C0C               	subwf	??_atoi+2,w,c
  4294  000656  A0D8               	btfss	status,0,c
  4295  000658  D002               	goto	i2l2200
  4296  00065A                     i2u197_40:
  4297  00065A  0E00               	movlw	0
  4298  00065C  6E14               	movwf	_atoi$1043,c
  4299  00065E                     i2l2200:
  4300  00065E  C014  F010         	movff	_atoi$1043,_atoi$1042
  4301  000662  6A11               	clrf	_atoi$1042+1,c
  4302  000664  5010               	movf	_atoi$1042,w,c
  4303  000666  1011               	iorwf	_atoi$1042+1,w,c
  4304  000668  B4D8               	btfsc	status,2,c
  4305  00066A  D008               	goto	i2l2210
  4306  00066C  D7D5               	goto	i2l2190
  4307  00066E                     i2l2206:
  4308  00066E  0E00               	movlw	0
  4309  000670  6E0F               	movwf	atoi@neg+1,c
  4310  000672  0E01               	movlw	1
  4311  000674  6E0E               	movwf	atoi@neg,c
  4312  000676                     i2l2208:
  4313  000676  4A08               	infsnz	atoi@s,f,c
  4314  000678  2A09               	incf	atoi@s+1,f,c
  4315  00067A  D02E               	goto	i2l2216
  4316  00067C                     i2l2210:
  4317  00067C  C008  FFD9         	movff	atoi@s,fsr2l
  4318  000680  C009  FFDA         	movff	atoi@s+1,fsr2h
  4319  000684  50DF               	movf	indf2,w,c
  4320  000686  6E0A               	movwf	??_atoi& (0+255),c
  4321  000688  6A0B               	clrf	(??_atoi+1)& (0+255),c
  4322                           
  4323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4324                           ; Switch size 1, requested type "simple"
  4325                           ; Number of cases is 1, Range of values is 0 to 0
  4326                           ; switch strategies available:
  4327                           ; Name         Instructions Cycles
  4328                           ; simple_byte            4     3 (average)
  4329                           ;	Chosen strategy is simple_byte
  4330  00068A  500B               	movf	??_atoi+1,w,c
  4331  00068C  0A00               	xorlw	0	; case 0
  4332  00068E  A4D8               	btfss	status,2,c
  4333  000690  D023               	goto	i2l2216
  4334                           
  4335                           ; Switch size 1, requested type "simple"
  4336                           ; Number of cases is 2, Range of values is 43 to 45
  4337                           ; switch strategies available:
  4338                           ; Name         Instructions Cycles
  4339                           ; simple_byte            7     4 (average)
  4340                           ;	Chosen strategy is simple_byte
  4341  000692  500A               	movf	??_atoi,w,c
  4342  000694  0A2B               	xorlw	43	; case 43
  4343  000696  B4D8               	btfsc	status,2,c
  4344  000698  D7EE               	goto	i2l2208
  4345  00069A  0A06               	xorlw	6	; case 45
  4346  00069C  B4D8               	btfsc	status,2,c
  4347  00069E  D7E7               	goto	i2l2206
  4348  0006A0  D01B               	goto	i2l2216
  4349  0006A2                     i2l2212:
  4350  0006A2  C015  F001         	movff	atoi@n,i2___wmul@multiplier
  4351  0006A6  C016  F002         	movff	atoi@n+1,i2___wmul@multiplier+1
  4352  0006AA  0E00               	movlw	0
  4353  0006AC  6E04               	movwf	i2___wmul@multiplicand+1,c
  4354  0006AE  0E0A               	movlw	10
  4355  0006B0  6E03               	movwf	i2___wmul@multiplicand,c
  4356  0006B2  EC3C  F00A         	call	i2___wmul	;wreg free
  4357  0006B6  C008  FFD9         	movff	atoi@s,fsr2l
  4358  0006BA  C009  FFDA         	movff	atoi@s+1,fsr2h
  4359  0006BE  50DF               	movf	indf2,w,c
  4360  0006C0  6E0A               	movwf	??_atoi& (0+255),c
  4361  0006C2  500A               	movf	??_atoi,w,c
  4362  0006C4  5E01               	subwf	?i2___wmul,f,c
  4363  0006C6  0E00               	movlw	0
  4364  0006C8  5A02               	subwfb	?i2___wmul+1,f,c
  4365  0006CA  0E30               	movlw	48
  4366  0006CC  2401               	addwf	?i2___wmul,w,c
  4367  0006CE  6E15               	movwf	atoi@n,c
  4368  0006D0  0E00               	movlw	0
  4369  0006D2  2002               	addwfc	?i2___wmul+1,w,c
  4370  0006D4  6E16               	movwf	atoi@n+1,c
  4371  0006D6  D7CF               	goto	i2l2208
  4372  0006D8                     i2l2216:
  4373  0006D8  0ED0               	movlw	208
  4374  0006DA  6E0A               	movwf	??_atoi& (0+255),c
  4375  0006DC  0EFF               	movlw	255
  4376  0006DE  6E0B               	movwf	(??_atoi+1)& (0+255),c
  4377  0006E0  C008  FFD9         	movff	atoi@s,fsr2l
  4378  0006E4  C009  FFDA         	movff	atoi@s+1,fsr2h
  4379  0006E8  50DF               	movf	indf2,w,c
  4380  0006EA  6E0C               	movwf	(??_atoi+2)& (0+255),c
  4381  0006EC  6A0D               	clrf	(??_atoi+3)& (0+255),c
  4382  0006EE  500A               	movf	??_atoi,w,c
  4383  0006F0  260C               	addwf	??_atoi+2,f,c
  4384  0006F2  500B               	movf	??_atoi+1,w,c
  4385  0006F4  220D               	addwfc	??_atoi+3,f,c
  4386  0006F6  500D               	movf	??_atoi+3,w,c
  4387  0006F8  E106               	bnz	i2u199_40
  4388  0006FA  0E0A               	movlw	10
  4389  0006FC  5C0C               	subwf	??_atoi+2,w,c
  4390  0006FE  B0D8               	btfsc	status,0,c
  4391  000700  D002               	goto	i2u199_40
  4392  000702  0E01               	movlw	1
  4393  000704  D001               	goto	i2u200_40
  4394  000706                     i2u199_40:
  4395  000706  0E00               	movlw	0
  4396  000708                     i2u200_40:
  4397  000708  6E12               	movwf	_atoi$1044,c
  4398  00070A  6A13               	clrf	_atoi$1044+1,c
  4399  00070C  5012               	movf	_atoi$1044,w,c
  4400  00070E  1013               	iorwf	_atoi$1044+1,w,c
  4401  000710  A4D8               	btfss	status,2,c
  4402  000712  D7C7               	goto	i2l2212
  4403  000714  500E               	movf	atoi@neg,w,c
  4404  000716  100F               	iorwf	atoi@neg+1,w,c
  4405  000718  A4D8               	btfss	status,2,c
  4406  00071A  D00D               	goto	i2l929
  4407  00071C  C015  F00A         	movff	atoi@n,??_atoi
  4408  000720  C016  F00B         	movff	atoi@n+1,??_atoi+1
  4409  000724  1E0A               	comf	??_atoi,f,c
  4410  000726  1E0B               	comf	??_atoi+1,f,c
  4411  000728  4A0A               	infsnz	??_atoi,f,c
  4412  00072A  2A0B               	incf	??_atoi+1,f,c
  4413  00072C  C00A  F008         	movff	??_atoi,?_atoi
  4414  000730  C00B  F009         	movff	??_atoi+1,?_atoi+1
  4415  000734  0012               	return	
  4416  000736                     i2l929:
  4417  000736  C015  F008         	movff	atoi@n,?_atoi
  4418  00073A  C016  F009         	movff	atoi@n+1,?_atoi+1
  4419  00073E  0012               	return		;funcret
  4420  000740                     __end_of_atoi:
  4421                           	opt callstack 0
  4422                           
  4423 ;; *************** function i2___wmul *****************
  4424 ;; Defined at:
  4425 ;;		line 15 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  multiplier      2    0[COMRAM] unsigned int 
  4428 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  __wmul          2    4[COMRAM] unsigned int 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  2    0[COMRAM] unsigned int 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, prodl, prodh
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         4       0       0       0       0       0       0
  4441 ;;      Locals:         2       0       0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0
  4443 ;;      Totals:         6       0       0       0       0       0       0
  4444 ;;Total ram usage:        6 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_atoi
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text39
  4454  001478                     __ptext39:
  4455                           	opt callstack 0
  4456  001478                     i2___wmul:
  4457                           	opt callstack 21
  4458                           
  4459                           ;incstack = 0
  4460  001478  5001               	movf	i2___wmul@multiplier,w,c
  4461  00147A  0203               	mulwf	i2___wmul@multiplicand,c
  4462  00147C  CFF3 F005          	movff	prodl,i2___wmul@product
  4463  001480  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4464  001484  5001               	movf	i2___wmul@multiplier,w,c
  4465  001486  0204               	mulwf	i2___wmul@multiplicand+1,c
  4466  001488  50F3               	movf	prodl,w,c
  4467  00148A  2606               	addwf	i2___wmul@product+1,f,c
  4468  00148C  5002               	movf	i2___wmul@multiplier+1,w,c
  4469  00148E  0203               	mulwf	i2___wmul@multiplicand,c
  4470  001490  50F3               	movf	prodl,w,c
  4471  001492  2606               	addwf	i2___wmul@product+1,f,c
  4472  001494  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4473  001498  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4474  00149C  0012               	return		;funcret
  4475  00149E                     __end_ofi2___wmul:
  4476                           	opt callstack 0
  4477                           
  4478 ;; *************** function _isspace *****************
  4479 ;; Defined at:
  4480 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  c               2    0[COMRAM] int 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;		None
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  2    0[COMRAM] int 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4494 ;;      Params:         2       0       0       0       0       0       0
  4495 ;;      Locals:         1       0       0       0       0       0       0
  4496 ;;      Temps:          4       0       0       0       0       0       0
  4497 ;;      Totals:         7       0       0       0       0       0       0
  4498 ;;Total ram usage:        7 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_atoi
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text40
  4508  0012C2                     __ptext40:
  4509                           	opt callstack 0
  4510  0012C2                     _isspace:
  4511                           	opt callstack 21
  4512                           
  4513                           ;incstack = 0
  4514  0012C2  0E01               	movlw	1
  4515  0012C4  6E07               	movwf	_isspace$1060,c
  4516  0012C6  0E20               	movlw	32
  4517  0012C8  1801               	xorwf	isspace@c,w,c
  4518  0012CA  1002               	iorwf	isspace@c+1,w,c
  4519  0012CC  B4D8               	btfsc	status,2,c
  4520  0012CE  D014               	goto	i2l1854
  4521  0012D0  0EF7               	movlw	247
  4522  0012D2  6E03               	movwf	??_isspace& (0+255),c
  4523  0012D4  0EFF               	movlw	255
  4524  0012D6  6E04               	movwf	(??_isspace+1)& (0+255),c
  4525  0012D8  C001  F005         	movff	isspace@c,??_isspace+2
  4526  0012DC  C002  F006         	movff	isspace@c+1,??_isspace+3
  4527  0012E0  5003               	movf	??_isspace,w,c
  4528  0012E2  2605               	addwf	??_isspace+2,f,c
  4529  0012E4  5004               	movf	??_isspace+1,w,c
  4530  0012E6  2206               	addwfc	??_isspace+3,f,c
  4531  0012E8  5006               	movf	??_isspace+3,w,c
  4532  0012EA  E104               	bnz	i2u146_40
  4533  0012EC  0E05               	movlw	5
  4534  0012EE  5C05               	subwf	??_isspace+2,w,c
  4535  0012F0  A0D8               	btfss	status,0,c
  4536  0012F2  D002               	goto	i2l1854
  4537  0012F4                     i2u146_40:
  4538  0012F4  0E00               	movlw	0
  4539  0012F6  6E07               	movwf	_isspace$1060,c
  4540  0012F8                     i2l1854:
  4541  0012F8  C007  F001         	movff	_isspace$1060,?_isspace
  4542  0012FC  6A02               	clrf	?_isspace+1,c
  4543  0012FE  0012               	return		;funcret
  4544  001300                     __end_of_isspace:
  4545                           	opt callstack 0
  4546                           
  4547 ;; *************** function _isdigit *****************
  4548 ;; Defined at:
  4549 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  c               2    0[COMRAM] int 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  2    0[COMRAM] int 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4563 ;;      Params:         2       0       0       0       0       0       0
  4564 ;;      Locals:         0       0       0       0       0       0       0
  4565 ;;      Temps:          4       0       0       0       0       0       0
  4566 ;;      Totals:         6       0       0       0       0       0       0
  4567 ;;Total ram usage:        6 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_atoi
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text41
  4577  0013CE                     __ptext41:
  4578                           	opt callstack 0
  4579  0013CE                     _isdigit:
  4580                           	opt callstack 21
  4581                           
  4582                           ;incstack = 0
  4583  0013CE  0ED0               	movlw	208
  4584  0013D0  6E03               	movwf	??_isdigit& (0+255),c
  4585  0013D2  0EFF               	movlw	255
  4586  0013D4  6E04               	movwf	(??_isdigit+1)& (0+255),c
  4587  0013D6  C001  F005         	movff	isdigit@c,??_isdigit+2
  4588  0013DA  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  4589  0013DE  5003               	movf	??_isdigit,w,c
  4590  0013E0  2605               	addwf	??_isdigit+2,f,c
  4591  0013E2  5004               	movf	??_isdigit+1,w,c
  4592  0013E4  2206               	addwfc	??_isdigit+3,f,c
  4593  0013E6  5006               	movf	??_isdigit+3,w,c
  4594  0013E8  E106               	bnz	i2u147_40
  4595  0013EA  0E0A               	movlw	10
  4596  0013EC  5C05               	subwf	??_isdigit+2,w,c
  4597  0013EE  B0D8               	btfsc	status,0,c
  4598  0013F0  D002               	goto	i2u147_40
  4599  0013F2  0E01               	movlw	1
  4600  0013F4  D001               	goto	i2u148_40
  4601  0013F6                     i2u147_40:
  4602  0013F6  0E00               	movlw	0
  4603  0013F8                     i2u148_40:
  4604  0013F8  6E01               	movwf	?_isdigit,c
  4605  0013FA  6A02               	clrf	?_isdigit+1,c
  4606  0013FC  0012               	return		;funcret
  4607  0013FE                     __end_of_isdigit:
  4608                           	opt callstack 0
  4609                           
  4610 ;; *************** function _USARTReadString *****************
  4611 ;; Defined at:
  4612 ;;		line 38 in file "usart/UsartFunctions.h"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  buf             2   18[COMRAM] PTR unsigned char 
  4615 ;;		 -> usartOccured@text(20), 
  4616 ;;  max_length      2   20[COMRAM] int 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  i               2   27[COMRAM] int 
  4619 ;;  tmp             1   29[COMRAM] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  2   18[COMRAM] int 
  4622 ;; Registers used:
  4623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4629 ;;      Params:         4       0       0       0       0       0       0
  4630 ;;      Locals:         3       0       0       0       0       0       0
  4631 ;;      Temps:          5       0       0       0       0       0       0
  4632 ;;      Totals:        12       0       0       0       0       0       0
  4633 ;;Total ram usage:       12 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    2
  4636 ;; This function calls:
  4637 ;;		_USARTReadChar
  4638 ;; This function is called by:
  4639 ;;		_setupFunctions
  4640 ;;		_usartOccured
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text42
  4645  000D8E                     __ptext42:
  4646                           	opt callstack 0
  4647  000D8E                     _USARTReadString:
  4648                           	opt callstack 20
  4649                           
  4650                           ;usart/UsartFunctions.h: 39:     int i = 0;
  4651                           
  4652                           ;incstack = 0
  4653  000D8E  0E00               	movlw	0
  4654  000D90  6E1D               	movwf	USARTReadString@i+1,c
  4655  000D92  0E00               	movlw	0
  4656  000D94  6E1C               	movwf	USARTReadString@i,c
  4657                           
  4658                           ;usart/UsartFunctions.h: 41:     for (i = 0; i < max_length - 1; i++) {
  4659  000D96  0E00               	movlw	0
  4660  000D98  6E1D               	movwf	USARTReadString@i+1,c
  4661  000D9A  0E00               	movlw	0
  4662  000D9C  6E1C               	movwf	USARTReadString@i,c
  4663  000D9E  D018               	goto	i2l2064
  4664  000DA0                     i2l2052:
  4665                           
  4666                           ;usart/UsartFunctions.h: 42:         tmp = USARTReadChar();
  4667  000DA0  ECB8  F00A         	call	_USARTReadChar	;wreg free
  4668  000DA4  6E1E               	movwf	USARTReadString@tmp,c
  4669                           
  4670                           ;usart/UsartFunctions.h: 44:         if (tmp == '\0' || tmp == '\n' || tmp == '\r') {
  4671  000DA6  501E               	movf	USARTReadString@tmp,w,c
  4672  000DA8  B4D8               	btfsc	status,2,c
  4673  000DAA  D028               	goto	i2u179_40
  4674  000DAC  0E0A               	movlw	10
  4675  000DAE  181E               	xorwf	USARTReadString@tmp,w,c
  4676  000DB0  B4D8               	btfsc	status,2,c
  4677  000DB2  D024               	goto	i2u179_40
  4678  000DB4  0E0D               	movlw	13
  4679  000DB6  181E               	xorwf	USARTReadString@tmp,w,c
  4680  000DB8  B4D8               	btfsc	status,2,c
  4681  000DBA  D020               	goto	i2u179_40
  4682                           
  4683                           ;usart/UsartFunctions.h: 47:         buf[i] = tmp;
  4684  000DBC  501C               	movf	USARTReadString@i,w,c
  4685  000DBE  2413               	addwf	USARTReadString@buf,w,c
  4686  000DC0  6ED9               	movwf	fsr2l,c
  4687  000DC2  501D               	movf	USARTReadString@i+1,w,c
  4688  000DC4  2014               	addwfc	USARTReadString@buf+1,w,c
  4689  000DC6  6EDA               	movwf	fsr2h,c
  4690  000DC8  C01E  FFDF         	movff	USARTReadString@tmp,indf2
  4691                           
  4692                           ;usart/UsartFunctions.h: 48:     }
  4693  000DCC  4A1C               	infsnz	USARTReadString@i,f,c
  4694  000DCE  2A1D               	incf	USARTReadString@i+1,f,c
  4695  000DD0                     i2l2064:
  4696  000DD0  0EFF               	movlw	255
  4697  000DD2  6E17               	movwf	??_USARTReadString& (0+255),c
  4698  000DD4  0EFF               	movlw	255
  4699  000DD6  6E18               	movwf	(??_USARTReadString+1)& (0+255),c
  4700  000DD8  C015  F019         	movff	USARTReadString@max_length,??_USARTReadString+2
  4701  000DDC  C016  F01A         	movff	USARTReadString@max_length+1,??_USARTReadString+3
  4702  000DE0  5017               	movf	??_USARTReadString,w,c
  4703  000DE2  2619               	addwf	??_USARTReadString+2,f,c
  4704  000DE4  5018               	movf	??_USARTReadString+1,w,c
  4705  000DE6  221A               	addwfc	??_USARTReadString+3,f,c
  4706  000DE8  5019               	movf	??_USARTReadString+2,w,c
  4707  000DEA  5C1C               	subwf	USARTReadString@i,w,c
  4708  000DEC  501D               	movf	USARTReadString@i+1,w,c
  4709  000DEE  0A80               	xorlw	128
  4710  000DF0  6E1B               	movwf	(??_USARTReadString+4)& (0+255),c
  4711  000DF2  501A               	movf	??_USARTReadString+3,w,c
  4712  000DF4  0A80               	xorlw	128
  4713  000DF6  581B               	subwfb	(??_USARTReadString+4)& (0+255),w,c
  4714  000DF8  A0D8               	btfss	status,0,c
  4715  000DFA  D7D2               	goto	i2l2052
  4716  000DFC                     i2u179_40:
  4717                           
  4718                           ;usart/UsartFunctions.h: 50:     buf[i + 1] = '\0';
  4719  000DFC  501C               	movf	USARTReadString@i,w,c
  4720  000DFE  2413               	addwf	USARTReadString@buf,w,c
  4721  000E00  6E17               	movwf	??_USARTReadString& (0+255),c
  4722  000E02  501D               	movf	USARTReadString@i+1,w,c
  4723  000E04  2014               	addwfc	USARTReadString@buf+1,w,c
  4724  000E06  6E18               	movwf	(??_USARTReadString+1)& (0+255),c
  4725  000E08  0E01               	movlw	1
  4726  000E0A  2417               	addwf	??_USARTReadString,w,c
  4727  000E0C  6ED9               	movwf	fsr2l,c
  4728  000E0E  0E00               	movlw	0
  4729  000E10  2018               	addwfc	??_USARTReadString+1,w,c
  4730  000E12  6EDA               	movwf	fsr2h,c
  4731  000E14  0E00               	movlw	0
  4732  000E16  6EDF               	movwf	indf2,c
  4733  000E18  0012               	return		;funcret
  4734  000E1A                     __end_of_USARTReadString:
  4735                           	opt callstack 0
  4736                           
  4737 ;; *************** function _USARTReadChar *****************
  4738 ;; Defined at:
  4739 ;;		line 33 in file "usart/UsartFunctions.h"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      unsigned char 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4753 ;;      Params:         0       0       0       0       0       0       0
  4754 ;;      Locals:         0       0       0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0
  4756 ;;      Totals:         0       0       0       0       0       0       0
  4757 ;;Total ram usage:        0 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    1
  4760 ;; This function calls:
  4761 ;;		_USARTDataReady
  4762 ;; This function is called by:
  4763 ;;		_USARTReadString
  4764 ;;		_setupFunctions
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text43
  4769  001570                     __ptext43:
  4770                           	opt callstack 0
  4771  001570                     _USARTReadChar:
  4772                           	opt callstack 20
  4773                           
  4774                           ;usart/UsartFunctions.h: 34:     while (!USARTDataReady());
  4775                           
  4776                           ;incstack = 0
  4777  001570  ECA6  F00A         	call	_USARTDataReady	;wreg free
  4778  001574  5001               	movf	?_USARTDataReady,w,c
  4779  001576  1002               	iorwf	?_USARTDataReady+1,w,c
  4780  001578  B4D8               	btfsc	status,2,c
  4781  00157A  D7FA               	goto	_USARTReadChar
  4782                           
  4783                           ;usart/UsartFunctions.h: 35:     return RCREG;
  4784  00157C  50AE               	movf	4014,w,c	;volatile
  4785  00157E  0012               	return		;funcret
  4786  001580                     __end_of_USARTReadChar:
  4787                           	opt callstack 0
  4788                           
  4789 ;; *************** function _USARTDataReady *****************
  4790 ;; Defined at:
  4791 ;;		line 23 in file "usart/UsartFunctions.h"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;		None
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  2    0[COMRAM] int 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4805 ;;      Params:         2       0       0       0       0       0       0
  4806 ;;      Locals:         0       0       0       0       0       0       0
  4807 ;;      Temps:          1       0       0       0       0       0       0
  4808 ;;      Totals:         3       0       0       0       0       0       0
  4809 ;;Total ram usage:        3 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_USARTReadChar
  4815 ;;		_setupFunctions
  4816 ;;		_ISR
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text44
  4821  00154C                     __ptext44:
  4822                           	opt callstack 0
  4823  00154C                     _USARTDataReady:
  4824                           	opt callstack 20
  4825                           
  4826                           ;usart/UsartFunctions.h: 24:     return PIR1bits.RCIF;
  4827                           
  4828                           ;incstack = 0
  4829  00154C  AA9E               	btfss	3998,5,c	;volatile
  4830  00154E  D003               	goto	i2u129_40
  4831  001550  6A03               	clrf	??_USARTDataReady& (0+255),c
  4832  001552  2A03               	incf	??_USARTDataReady& (0+255),f,c
  4833  001554  D001               	goto	i2u129_48
  4834  001556                     i2u129_40:
  4835  001556  6A03               	clrf	??_USARTDataReady& (0+255),c
  4836  001558                     i2u129_48:
  4837  001558  5003               	movf	??_USARTDataReady,w,c
  4838  00155A  6E01               	movwf	?_USARTDataReady,c
  4839  00155C  6A02               	clrf	?_USARTDataReady+1,c
  4840  00155E  0012               	return		;funcret
  4841  001560                     __end_of_USARTDataReady:
  4842                           	opt callstack 0
  4843                           
  4844                           	psect	text45
  4845  000000                     __ptext45:
  4846                           	opt callstack 0
  4847                           
  4848                           	psect	rparam
  4849  0000                     
  4850                           	psect	temp
  4851  00005D                     btemp:
  4852                           	opt callstack 0
  4853  00005D                     	ds	1
  4854  0000                     int$flags	set	btemp
  4855  0000                     wtemp8	set	btemp+1
  4856  0000                     ttemp5	set	btemp+1
  4857  0000                     ttemp6	set	btemp+4
  4858  0000                     ttemp7	set	btemp+8
  4859                           tosu	equ	0xFFF
  4860                           tosh	equ	0xFFE
  4861                           tosl	equ	0xFFD
  4862                           stkptr	equ	0xFFC
  4863                           pclatu	equ	0xFFB
  4864                           pclath	equ	0xFFA
  4865                           pcl	equ	0xFF9
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           indf0	equ	0xFEF
  4873                           postinc0	equ	0xFEE
  4874                           postdec0	equ	0xFED
  4875                           preinc0	equ	0xFEC
  4876                           plusw0	equ	0xFEB
  4877                           fsr0h	equ	0xFEA
  4878                           fsr0l	equ	0xFE9
  4879                           wreg	equ	0xFE8
  4880                           indf1	equ	0xFE7
  4881                           postinc1	equ	0xFE6
  4882                           postdec1	equ	0xFE5
  4883                           preinc1	equ	0xFE4
  4884                           plusw1	equ	0xFE3
  4885                           fsr1h	equ	0xFE2
  4886                           fsr1l	equ	0xFE1
  4887                           bsr	equ	0xFE0
  4888                           indf2	equ	0xFDF
  4889                           postinc2	equ	0xFDE
  4890                           postdec2	equ	0xFDD
  4891                           preinc2	equ	0xFDC
  4892                           plusw2	equ	0xFDB
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        0
    BSS         41
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     72      92
    BANK0           128     78     101
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ISR$1361	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    ISR$1315	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    ?_getUsart.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    ?_getUsart.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    ?_getUsart.writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    ?_getUsart.writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    ?_getUsart.writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    ?_getUsart.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    ?_getUsart.readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    ?_getUsart.readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    ?_getUsart.processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    ?_getUsart.isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    ?_Button_initButton.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    ?_Button_initButton.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    S35$5$0	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[1]), 
		 -> STR_1(CODE[1]), 

    S35$6$0	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_2(CODE[1]), STR_1(CODE[1]), 

    S35$3$0	PTR unsigned char  size(2) Largest target is 20
		 -> usartOccured@text(COMRAM[20]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> usartOccured@text(COMRAM[20]), 

    initProcessor@processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    USARTInit@usart	PTR struct . size(2) Largest target is 18
		 -> Application_setup@usart(BANK0[18]), 

    applicationUsart.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    applicationUsart.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    applicationUsart.writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    applicationUsart.writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    applicationUsart.writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    applicationUsart.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    applicationUsart.readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    applicationUsart.readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    applicationUsart.processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    applicationUsart.isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    setUsart@usart	PTR struct . size(2) Largest target is 18
		 -> Application_setup@usart(BANK0[18]), 

    applicationUsart	PTR struct . size(2) Largest target is 18
		 -> NULL(NULL[0]), Application_setup@usart(BANK0[18]), 

    setupFunctions@usart.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    setupFunctions@usart.writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    setupFunctions@usart.writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    setupFunctions@usart.writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    setupFunctions@usart.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    setupFunctions@usart.readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    setupFunctions@usart.readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    setupFunctions@usart.processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    setupFunctions@usart.isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    setupFunctions@usart	PTR struct . size(2) Largest target is 18
		 -> Application_setup@usart(BANK0[18]), 

    USARTWriteLine@ln	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_2(CODE[1]), STR_1(CODE[1]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[1]), 
		 -> STR_1(CODE[1]), 

    USARTReadString@buf	PTR unsigned char  size(2) Largest target is 20
		 -> usartOccured@text(COMRAM[20]), 

    Button_getValue@button.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    Button_getValue@button.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    Button_getValue@button	PTR struct . size(2) Largest target is 8
		 -> InputController_checkButtons@buton(BANK0[7]), 

    Button_initButton@onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    Button_initButton@portName	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    buton.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    buton.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    button2.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    button2.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    button1.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    button1.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    addButton@controller.buttons.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    addButton@controller.buttons.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    addButton@button	PTR struct . size(2) Largest target is 8
		 -> initInputController@button2(BANK0[7]), initInputController@button1(BANK0[7]), 

    addButton@controller	PTR struct . size(2) Largest target is 18
		 -> initInputController@controller(BANK0[16]), 

    InputController_checkButtons@controller	PTR struct . size(2) Largest target is 18
		 -> controller(BANK0[16]), 

    buton.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    buton.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    S68$onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    handleButtonEvents@buton.onPressed	PTR FTN()void  size(2) Largest target is 1
		 -> btn2Func(), btn1Func(), 

    S68$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    handleButtonEvents@buton.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    handleButtonEvents@buton	PTR struct . size(2) Largest target is 8
		 -> InputController_checkButtons@buton(BANK0[7]), 

    sp__getUsart.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    sp__getUsart.writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    sp__getUsart.writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    sp__getUsart.writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    sp__getUsart.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    sp__getUsart.readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    sp__getUsart.readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    sp__getUsart.processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    sp__getUsart.isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    usart.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    usart.writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    usart.writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    usart.writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    usart.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    usart.readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    usart.readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    usart.processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    usart.isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    setProcessor@us.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    S35$readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    us.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadByte(), 

    S35$writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    us.writeInt	PTR FTN(int ,unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteInt(), 

    S35$writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    us.writeLine	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteLine(), 

    S35$writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    us.writeString	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteString(), 

    S35$writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    us.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> USARTWriteByte(), 

    S35$readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    us.readString	PTR FTN(PTR unsigned char ,int ,)int  size(2) Largest target is 2
		 -> USARTReadString(), 

    S35$readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    us.readChar	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> USARTReadChar(), 

    us.processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    S35$isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    us.isDataReady	PTR FTN()int  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    S26$process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 

    _processor.process	PTR FTN()void  size(2) Largest target is 2
		 -> USARTDataReady(), usartOccured(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_usartOccured
    _usartOccured->_USARTReadString
    i2_USARTWriteLine->i2_USARTWriteString
    i2_USARTWriteInt->i2___awdiv
    _atoi->_isspace
    _USARTReadString->i2_getUsart
    _USARTReadChar->_USARTDataReady

Critical Paths under _main in BANK0

    _main->_Application_setup
    _Application_setup->_initInputController
    _setProcessor->_getUsart
    _initInputController->_Button_initButton
    _addButton->___wmul
    _USARTInit->_calculateSpbrg
    _calculateSpbrg->___aldiv
    _Application_loop->_InputController_checkButtons
    _InputController_checkButtons->_handleButtonEvents
    _handleButtonEvents->_btn1Func
    _handleButtonEvents->_btn2Func
    _btn2Func->_USARTWriteInt
    _btn1Func->_USARTWriteInt
    _USARTWriteInt->_getUsart
    _USARTWriteInt->_getUsart
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_getUsart
    _Button_getValue->_getThBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9813
                   _Application_loop
                  _Application_setup
               _setPortInputsOutputs
                      _setupSettings
 ---------------------------------------------------------------------------------
 (1) _setupSettings                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPortInputsOutputs                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Application_setup                                   18    18      0    2782
                                             60 BANK0     18    18      0
                          _USARTInit
                _initInputController
                       _setProcessor
 ---------------------------------------------------------------------------------
 (2) _setProcessor                                        20    20      0      74
                                             18 BANK0     20    20      0
                           _getUsart
 ---------------------------------------------------------------------------------
 (2) _initInputController                                 46    30     16    1482
                                             14 BANK0     46    30     16
                  _Button_initButton
                          _addButton
 ---------------------------------------------------------------------------------
 (3) _addButton                                            6     2      4     745
                                              6 BANK0      6     2      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Button_initButton                                   14     7      7     617
                                              0 BANK0     14     7      7
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                            6     0      6    1141
                                             26 BANK0      6     0      6
                     _calculateSpbrg
                   _enableInterrupts
                           _setUsart
                     _setupFunctions
 ---------------------------------------------------------------------------------
 (3) _setupFunctions                                       2     0      2     252
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _setUsart                                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _enableInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _calculateSpbrg                                      12     8      4     573
                                             14 BANK0     12     8      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     452
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Application_loop                                     0     0      0    7031
       _InputController_checkButtons
 ---------------------------------------------------------------------------------
 (2) _InputController_checkButtons                        14    12      2    7031
                                             36 BANK0     14    12      2
                             ___wmul
                 _handleButtonEvents
 ---------------------------------------------------------------------------------
 (3) _handleButtonEvents                                   4     2      2    6508
                                             32 BANK0      4     2      2
                    _Button_getValue
                      _USARTWriteInt *
                     _USARTWriteLine *
                           _btn1Func *
                           _btn2Func *
                           _getUsart
 ---------------------------------------------------------------------------------
 (4) _btn2Func                                             2     2      0    1986
                                             30 BANK0      2     2      0
                      _USARTWriteInt *
                   _USARTWriteString *
                           _getUsart
 ---------------------------------------------------------------------------------
 (4) _btn1Func                                             2     2      0    1986
                                             30 BANK0      2     2      0
                      _USARTWriteInt *
                   _USARTWriteString *
                           _getUsart
 ---------------------------------------------------------------------------------
 (3) _getUsart                                            18     0     18       0
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (5) _USARTWriteInt                                       12     9      3    1660
                                             18 BANK0     12     9      3
                     _USARTWriteByte
                            ___awdiv
                            ___awmod
                           _getUsart (ARG)
                         i2_getUsart (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _USARTWriteByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _USARTWriteLine                                       2     0      2     405
                                             20 BANK0      2     0      2
                   _USARTWriteString
                           _getUsart (ARG)
                         i2_getUsart (ARG)
 ---------------------------------------------------------------------------------
 (5) _USARTWriteString                                     2     0      2     303
                                             18 BANK0      2     0      2
                           _getUsart (ARG)
 ---------------------------------------------------------------------------------
 (4) _Button_getValue                                      7     5      2     263
                                              5 BANK0      7     5      2
                           _getThBit
 ---------------------------------------------------------------------------------
 (5) _getThBit                                             5     3      2     120
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     325
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 18    18      0    2791
                                             54 COMRAM    18    18      0
                     _USARTDataReady *
                       _usartOccured *
                         i2_getUsart
 ---------------------------------------------------------------------------------
 (8) _usartOccured                                        24    24      0    2757
                                             30 COMRAM    24    24      0
                    _USARTReadString *
                               _atoi
                    i2_USARTWriteInt *
                   i2_USARTWriteLine *
                         i2_getUsart
 ---------------------------------------------------------------------------------
 (8) i2_getUsart                                          18     0     18       0
                                              0 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (9) i2_USARTWriteLine                                     2     0      2     145
                                              2 COMRAM     2     0      2
                 i2_USARTWriteString
 ---------------------------------------------------------------------------------
 (10) i2_USARTWriteString                                  2     0      2      97
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_USARTWriteInt                                     12     9      3    1140
                                              8 COMRAM    12     9      3
                   i2_USARTWriteByte
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (10) i2_USARTWriteByte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _atoi                                                15    13      2     972
                                              7 COMRAM    15    13      2
                            _isdigit
                            _isspace
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4      41
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) _isspace                                             7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) _USARTReadString                                     12     8      4     337
                                             18 COMRAM    12     8      4
                      _USARTReadChar
                         i2_getUsart (ARG)
 ---------------------------------------------------------------------------------
 (10) _USARTReadChar                                       0     0      0       0
                     _USARTDataReady
 ---------------------------------------------------------------------------------
 (11) _USARTDataReady                                      3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Application_loop
     _InputController_checkButtons
       ___wmul
       _handleButtonEvents
         _Button_getValue
           _getThBit
         _USARTWriteInt *
           _USARTWriteByte
           ___awdiv
           ___awmod
           _getUsart (ARG)
           _getUsart (ARG)
         _USARTWriteLine *
           _USARTWriteString
             _getUsart (ARG)
           _getUsart (ARG)
           _getUsart (ARG)
         _btn1Func *
           _USARTWriteInt *
             _USARTWriteByte
             ___awdiv
             ___awmod
             _getUsart (ARG)
             _getUsart (ARG)
           _USARTWriteString *
             _getUsart (ARG)
           _getUsart *
         _btn2Func *
           _USARTWriteInt *
             _USARTWriteByte
             ___awdiv
             ___awmod
             _getUsart (ARG)
             _getUsart (ARG)
           _USARTWriteString *
             _getUsart (ARG)
           _getUsart *
         _getUsart *
   _Application_setup
     _USARTInit
       _calculateSpbrg
         ___aldiv
       _enableInterrupts
       _setUsart
       _setupFunctions
     _initInputController
       _Button_initButton
       _addButton
         ___wmul
     _setProcessor
       _getUsart
   _setPortInputsOutputs
   _setupSettings

 _ISR (ROOT)
   _USARTDataReady *
   _usartOccured *
     _USARTReadString *
       _USARTReadChar
         _USARTDataReady
       i2_getUsart (ARG)
     _atoi *
       _isdigit
       _isspace
       i2___wmul
     i2_USARTWriteInt *
       i2_USARTWriteByte
       i2___awdiv
       i2___awmod
     i2_USARTWriteLine *
       i2_USARTWriteString
     i2_getUsart *
   i2_getUsart *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     4E      65       5       78.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     48      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C1      15        0.0%
DATA                 0      0      C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Jun 10 01:19:42 2019

                       ?_USARTDataReady 0001                       USARTInit@baudRate 009C  
                          ___awdiv@sign 0085                     ___wmul@multiplicand 0082  
                           __CFG_BORV$3 000000                    ?_initInputController 008E  
                          __CFG_CP0$OFF 000000                            __CFG_CP1$OFF 000000  
                          __CFG_CP2$OFF 000000                            __CFG_CP3$OFF 000000  
                           __CFG_LVP$ON 000000                __size_ofi2_USARTWriteInt 00F2  
                                   l206 0840                                     l183 133E  
                                   _GIE 007F97                            __CFG_CPB$OFF 000000  
                          __CFG_CPD$OFF 000000                                     _ISR 0008  
                        ?_USARTReadChar 0001                _USARTWriteByte$intlevel0 153E  
                          ___awmod@sign 0085                                     tosl 000FFD  
                                   wreg 000FE8                   __size_of_usartOccured 00C6  
            __end_ofi2_USARTWriteString 142A                                    ?_ISR 0001  
                            i2_getUsart 150A                         ?_calculateSpbrg 008E  
                          __CFG_WDT$OFF 000000                                    l2000 0F30  
                                  l2006 0F82                                    l1602 0E88  
                                  l1606 0E96                                    l1622 10AC  
                                  l2262 1532                                    l1562 1542  
                                  l1642 10F2                                    l1634 10DA  
                                  l1626 10BA                                    l1618 10A0  
                                  l1660 1356                                    l1580 0E40  
                                  l1628 10C2                                    l1574 0E30  
                                  l1638 10E4                                    l1750 0A52  
                                  l1680 07CA                                    l1744 0A3A  
                                  l1586 0E56                                    l1690 07F2  
                                  l1674 0780                                    l1588 0E5E  
                                  l1692 0802                                    l1668 075C  
                                  l1756 0A74                                    l1772 0AC2  
                                  l1598 0E7E                                    l1686 07DA  
                                  l1758 0A80                                    l1696 0814  
                                  l1688 07DE                                    l1792 0A06  
                                  l1776 0AD8                                    l1768 0AB4  
                                  STR_1 0603                                    STR_2 0603  
                                  STR_3 0601                                    STR_4 0601  
                                  STR_5 0601                                    _BRGH 007D62  
                                  _CREN 007D5C                                    u1030 0E62  
                                  u1121 1500                                    u1140 13C6  
                                  u1150 13C8                                    u1134 13B2  
                                  u1135 13AE                                    u2031 132C  
                                  u1240 0840                                    u1090 10C6  
                                  u1330 0A84                                    u1411 0FE6  
                                  u1421 1392                                    _LATB 000F8A  
                                  u1191 0766                                    u1408 09DA  
                                  u1409 09EE                                    u1258 1190  
                                  u1259 11A4                                    u1268 11BE  
                                  u1445 102A                                    u1278 11F6  
                                  u1279 120A                                    u1288 1224  
                                  u1641 0D1E                                    u1651 0D46  
                                  u1388 096E                                    u1389 0982  
                                  u1661 0D84                                    u1398 09AC  
                                  u1399 09C0                                    u1671 0F68  
                                  _PEIE 007F96                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _SPEN 007D5F  
                                  _TXIF 007CF4                                    _TXEN 007D65  
                                  _SYNC 007D64                  __end_of_USARTWriteByte 154C  
                __end_of_USARTWriteLine 14C0                                    _atoi 0606  
                                  _main 1522                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 005D                                    prodh 000FF4  
                                  prodl 000FF3                          ?_USARTWriteInt 0092  
                                  start 000E                           __CFG_IESO$OFF 000000  
              __end_ofi2_USARTWriteByte 158C                __end_ofi2_USARTWriteLine 14DA  
            __size_of_Application_setup 0036                            ___param_bank 000000  
                                 ??_ISR 0037              __end_of_handleButtonEvents 0A1C  
                          _usartOccured 0AEA                   ??_initInputController 009E  
                       __end_of___aldiv 0AEA                                   ?_atoi 0008  
                                 ?_main 0001    __end_of_InputController_checkButtons 0FA0  
 __size_of_InputController_checkButtons 007C            _InputController_checkButtons 0F24  
                       __end_of___awdiv 0EA0                         __end_of___awmod 10FC  
                       ___awdiv@divisor 0082                                   i2l206 0932  
                       ??_setupSettings 0080                                   i2l183 1400  
                                 i2l929 0736                         ___awdiv@counter 0084  
                                 _RCREG 000FAE                                   _SPBRG 000FAF  
              _USARTWriteLine$intlevel0 14A4                                   _PORTD 000F83  
                 Button_getValue@button 0085                                   _TRISB 000F93  
                                 _TRISD 000F95                                   _TXREG 000FAD  
                         __CFG_PWRT$OFF 000000                           __CFG_WRT0$OFF 000000  
                         __CFG_WRT1$OFF 000000                           __CFG_WRT2$OFF 000000  
                         __CFG_WRT3$OFF 000000                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                        USARTWriteByte@ch 0080  
                        __CFG_EBTR3$OFF 000000                        USARTWriteInt@val 0092  
                      USARTWriteInt@str 0095                        USARTWriteLine@ln 0094  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                       __end_of_isdigit 13FE                        ?_USARTReadString 0013  
                                 atoi@n 0015                                   atoi@s 0008  
                       __end_of_isspace 1300                                   pclath 000FFA  
                                 tablat 000FF5                        _enableInterrupts 15A0  
                    __size_of_USARTInit 0046                        __end_ofi2___wmul 149E  
                                 plusw0 000FEB                                   plusw1 000FE3  
                                 plusw2 000FDB                         ?_USARTWriteByte 0001  
                       ?_USARTWriteLine 0094                                   ttemp5 005E  
                                 ttemp6 0061                                   ttemp7 0065  
                                 status 000FD8                                   wtemp8 005E  
                    __size_ofi2___awdiv 0084                      __size_ofi2___awmod 0070  
                        __CFG_PBADEN$ON 000000                          setProcessor@us 0094  
                        __CFG_MCLRE$OFF 000000            __end_of_setPortInputsOutputs 1596  
                       __initialization 1452                            __end_of_atoi 0740  
                          __end_of_main 1538                        ??_setupFunctions 0082  
                       ??_USARTReadChar 0004                                  ??_atoi 000A  
                                ??_main 00CE                           __activetblptr 000002  
         ?_InputController_checkButtons 00A4                       ??i2_USARTWriteInt 000C  
              __end_of_Application_loop 1570                             ?i2_getUsart 0001  
                      ___awdiv@dividend 0080                                  i2l2100 08E6  
                                i2l2102 08F6                                  i2l2200 065E  
                                i2l2210 067C                                  i2l2106 0908  
                                i2l2052 0DA0                                  i2l2212 06A2  
                                i2l2206 066E                                  i2l2064 0DD0  
                                i2l2216 06D8                                  i2l2208 0676  
                                i2l2090 08BE                                  i2l2084 0878  
                                i2l2190 0618                                  i2l2078 0854  
                                i2l2192 061C                                  i2l2096 08CE  
                                i2l2098 08D2                                  i2l1910 0F0C  
                                i2l1914 0F1A                                  i2l1906 0F02  
                                i2l1930 111C                                  i2l1854 12F8  
                                i2l1862 1582                                  i2l1950 1162  
                                i2l1942 114A                                  i2l1934 112A  
                                i2l1926 1110                                  i2l1936 1132  
                                i2l1872 1416                                  i2l1882 0EB4  
                                i2l1946 1154                                  i2l1894 0EDA  
                                i2l1896 0EE2                                  i2l1888 0EC4  
                                _OSCCON 000FD3                         ??_USARTWriteInt 0095  
                                _TRISC6 007CA6                                  _TRISC7 007CA7  
                      __end_of_btn1Func 11D2                        __end_of_btn2Func 1238  
                      __end_of_getThBit 13CE                          __CFG_XINST$OFF 000000  
                      __end_of_getUsart 150A                               ??___aldiv 0088  
                                ___wmul 142A                               ??___awdiv 0084  
                        __CFG_STVREN$ON 000000                               ??___awmod 0084  
              __end_of_USARTWriteString 136A                __size_of_Button_getValue 0044  
                                clear_0 1458                                  clear_1 1464  
                      ___awdiv@quotient 0086                         ___awmod@divisor 0082  
                       ___awmod@counter 0084                       __end_of_USARTInit 127E  
                        i2___awdiv@sign 0006                        __end_of_setUsart 15A0  
                             ??_isdigit 0003                       __end_ofi2___awdiv 0F24  
                     __end_ofi2___awmod 116C                            __mediumconst 0000  
                             ??_isspace 0003                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                        i2___awmod@sign 0006                      __size_of_addButton 0078  
                            __accesstop 0080                 __end_of__initialization 146A  
                      ??_USARTDataReady 0003                           ___rparam_used 000001  
                      _applicationUsart 00E3                          __pcstackCOMRAM 0001  
                   __size_ofi2_getUsart 0018                               ?i2___wmul 0001  
                      ??_calculateSpbrg 0092                    _setPortInputsOutputs 158C  
        ??_InputController_checkButtons 00A6                              __pbssBANK0 00CE  
                Application_setup@usart 00BC                      i2_USARTWriteString 13FE  
                     ?i2_USARTWriteByte 0001                       ?i2_USARTWriteLine 0003  
     InputController_checkButtons@buton 00AB                                 ?___wmul 0080  
                    ??i2_USARTWriteByte 0001                      ??i2_USARTWriteLine 0005  
                    USARTReadString@buf 0013                      USARTReadString@tmp 001E  
                   ?i2_USARTWriteString 0001                       __end_of_addButton 1018  
             USARTWriteInt@field_length 0094                __end_of_enableInterrupts 15A8  
                         ?_setProcessor 0001                              ??i2___wmul 0005  
                             ?_btn1Func 0001                               ?_btn2Func 0001  
                      i2USARTWriteInt@i 0013                        i2USARTWriteInt@j 0011  
                     ??_Button_getValue 0087                   ?_setPortInputsOutputs 0001  
InputController_checkButtons@controller 00A4                               ?_getThBit 0080  
                      ??_USARTWriteByte 0080                        ??_USARTWriteLine 0096  
                  Button_initButton@pin 0082                               ?_getUsart 0080  
                    _handleButtonEvents 0934                      USARTWriteInt@F2935 00CE  
                  ??i2_USARTWriteString 0003           InputController_checkButtons@i 00A9  
                        USARTInit@usart 009A                     ?_handleButtonEvents 00A0  
                            _controller 00D3                    getThBit@connectedBit 0080  
                               __Hparam 0000                               ?_setUsart 0080  
                               __Lparam 0000             __end_of_initInputController 0D8E  
                               ___aldiv 0A1C                                 ___awdiv 0E1A  
                               ___awmod 108A                         __size_of___wmul 0028  
                          __psmallconst 0600                                 __pcinit 1452  
                       i2_USARTWriteInt 0842                                 __ramtop 0600  
                        ??_setProcessor 0092                                 __ptext0 1522  
                               __ptext1 15A8                                 __ptext2 158C  
                               __ptext3 1300                                 __ptext4 14DA  
                               __ptext5 0CFE                                 __ptext6 0FA0  
                               __ptext7 136A                                 __ptext8 1238  
                               __ptext9 0C5E                    ??_handleButtonEvents 00A2  
               handleButtonEvents@buton 00A0                            __size_of_ISR 0C56  
                            ??_btn1Func 009E                              ??_btn2Func 009E  
                               _isdigit 13CE                         addButton@button 0088  
                      ___awmod@dividend 0080                        ___aldiv@dividend 0080  
                 __end_of_setupSettings 15AE                                 _isspace 12C2  
                            ??_getThBit 0082                                 atoi@neg 000E  
                          ??i2_getUsart 0013                              ??_getUsart 0092  
                     ?_Application_loop 0001                          __pintcode_body 0BB0  
                  end_of_initialization 146A                      ??_Application_loop 00B2  
                    i2USARTWriteByte@ch 0001                      i2USARTWriteInt@val 0009  
                    i2USARTWriteInt@str 000C                      i2USARTWriteLine@ln 0003  
                         __Lmediumconst 0000                                 int_func 0BB0  
                   i2___wmul@multiplier 0001                       usartOccured@F2933 0049  
              __size_of_USARTReadString 008C                              ??_setUsart 0082  
                      ___aldiv@quotient 008A                                 postdec0 000FED  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                      __end_ofi2_getUsart 1522  
                     ?_USARTWriteString 0092                  Button_initButton@buton 0087  
                     _Button_initButton 136A           initInputController@controller 00AC  
                 __end_of_USARTReadChar 1580                  setProcessor@_processor 0092  
                    ??_USARTWriteString 0094                      ?_Button_initButton 0080  
                ??_setPortInputsOutputs 0080                               _USARTInit 1238  
             Button_initButton@portName 0080                               i2___awdiv 0EA0  
                             i2___awmod 10FC                     setupFunctions@usart 0080  
                   ??_Button_initButton 0087                      i2___awdiv@dividend 0001  
                        USARTWriteInt@i 009C                          USARTWriteInt@j 009A  
                 __end_of_USARTWriteInt 0842                 __end_ofi2_USARTWriteInt 0934  
            initInputController@button1 009E              initInputController@button2 00A5  
                        __end_of___wmul 1452               __end_of_Button_initButton 139C  
                  Button_getValue@value 008A                        i2___wmul@product 0005  
                   start_initialization 1452                              ?_USARTInit 009A  
                    i2___awdiv@quotient 0007                             __end_of_ISR 0C5E  
                     __size_ofi2___wmul 0026                 __size_of_setupFunctions 00A0  
                            ?i2___awdiv 0001                              ?i2___awmod 0001  
             USARTReadString@max_length 0015                        USARTReadString@i 001C  
                  __end_of_setProcessor 14F2                        __CFG_OSC$INTIO67 000000  
                         usartOccured@i 0035                                ??___wmul 0084  
                       _Button_getValue 127E                        __CFG_LPT1OSC$OFF 000000  
                         ?_usartOccured 0001                       ??_USARTReadString 0017  
                         setUsart@usart 0080                       ?_enableInterrupts 0001  
                             _addButton 0FA0                      ??_enableInterrupts 0080  
                           __pbssCOMRAM 0049               __size_ofi2_USARTWriteByte 000C  
             __size_ofi2_USARTWriteLine 001A                           __pcstackBANK0 0080  
                     __size_of_btn1Func 0066                       __size_of_btn2Func 0066  
                     __size_of_getThBit 0032                       __size_of_getUsart 0018  
                             _atoi$1042 0010                               _atoi$1043 0014  
                             _atoi$1044 0012                               __pnvBANK0 00E3  
                     __CFG_CCP2MX$PORTC 000000                        ?i2_USARTWriteInt 0009  
                             __pintcode 0008                                ?___aldiv 0080  
                              ?___awdiv 0080                                ?___awmod 0080  
                     __size_of_setUsart 000A                          ??_usartOccured 001F  
               __size_of_USARTDataReady 0014              __size_of_Button_initButton 0032  
                           __smallconst 0600                                ?_isdigit 0001  
                            ?_addButton 0086                             ??_USARTInit 00A0  
                              ?_isspace 0001                             ??i2___awdiv 0005  
                           ??i2___awmod 0005                                _ISR$1361 0047  
           __size_ofi2_USARTWriteString 002C                         ___aldiv@divisor 0084  
               __size_of_calculateSpbrg 0072                         ___aldiv@counter 0088  
                        ___wmul@product 0084                 __end_of_Button_getValue 12C2  
                              i2u200_40 0708                                i2u210_48 0C0E  
                              i2u210_49 0C22                                i2u205_41 0B00  
                              i2u206_48 0B28                                i2u206_49 0B3C  
                              i2u207_48 0B70                                i2u207_49 0B84  
                              i2u129_40 1556                                i2u161_40 1136  
                              i2u208_48 0B9C                                i2u129_48 1558  
                              i2u146_40 12F4                                i2u147_40 13F6  
                              i2u155_40 0EE6                                i2u148_40 13F8  
                              i2u181_41 085E                                _PIR1bits 000F9E  
                              i2u186_40 0932                                i2u179_40 0DFC  
                              i2u187_41 1518                                i2u197_40 065A  
                              i2u199_40 0706                        __CFG_WDTPS$32768 000000  
             __size_of_Application_loop 0010                   i2USARTWriteString@str 0001  
                      usartOccured@text 0021            __size_of_initInputController 0090  
                     ___wmul@multiplier 0080                                i2___wmul 1478  
           __size_of_handleButtonEvents 00E8                       i2___awdiv@divisor 0003  
                     i2___awdiv@counter 0005                            _isspace$1060 0007  
                        _setupFunctions 0C5E                   __size_of_setProcessor 0018  
                    i2___awmod@dividend 0001               __size_of_USARTWriteString 0034  
               __size_of_USARTWriteByte 0014                 __size_of_USARTWriteLine 0022  
                              __Hrparam 0000                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000                  __size_of_setupSettings 0006  
                      __size_of___aldiv 00CE                        __size_of___awdiv 0086  
           i2USARTWriteInt@field_length 000B                        __size_of___awmod 0072  
                 i2___wmul@multiplicand 0003                     addButton@controller 0086  
                          _setProcessor 14DA                                _btn1Func 116C  
                           ??_addButton 008A                                _btn2Func 11D2  
                __end_of_setupFunctions 0CFE                        i2_USARTWriteByte 1580  
                      i2_USARTWriteLine 14C0                        __size_of_isdigit 0030  
                              _getThBit 139C                        __size_of_isspace 003E  
                              __ptext10 1596                                __ptext11 15A0  
                              __ptext20 0740                                __ptext12 1018  
                              __ptext21 108A                                __ptext13 0A1C  
                              __ptext30 0AEA                                __ptext22 0E1A  
                              __ptext14 1560                                __ptext31 150A  
                              __ptext23 1538                                __ptext15 0F24  
                              __ptext40 12C2                                __ptext32 14C0  
                              __ptext24 149E                                __ptext16 0934  
                              __ptext41 13CE                                __ptext33 13FE  
                              __ptext25 1336                                __ptext17 116C  
                              __ptext42 0D8E                                __ptext34 0842  
                              __ptext26 127E                                __ptext18 11D2  
                              __ptext43 1570                                __ptext35 10FC  
                              __ptext27 139C                                __ptext19 14F2  
                              __ptext44 154C                                __ptext36 0EA0  
                              __ptext28 142A                                __ptext45 0000  
                              __ptext37 1580                                __ptext38 0606  
                              __ptext39 1478           __size_of_setPortInputsOutputs 000A  
                              _getUsart 14F2                    __end_of_usartOccured 0BB0  
                         __size_of_atoi 013A                           __size_of_main 0016  
                       _USARTReadString 0D8E                        ?_Button_getValue 0085  
                __size_of_USARTReadChar 0010                                _setUsart 1596  
                          getThBit@port 0084                 _USARTWriteInt$intlevel0 0746  
                              int$flags 005D                     calculateSpbrg@bolum 0096  
                        _USARTDataReady 154C                       _Application_setup 1300  
                    ?_Application_setup 0001                       i2___awmod@divisor 0003  
                     i2___awmod@counter 0005                         ?_setupFunctions 0080  
                __size_of_USARTWriteInt 0102                     ??_Application_setup 00BC  
                         _setupSettings 15A8                                isdigit@c 0001  
                              intlevel2 0000                          _calculateSpbrg 1018  
             __size_of_enableInterrupts 0008                                isspace@c 0001  
                __end_of_USARTDataReady 1560               __end_of_Application_setup 1336  
                      _Application_loop 1560                     USARTWriteString@str 0092  
            _USARTWriteString$intlevel0 133C                           _USARTReadChar 1570  
                         _USARTReadByte 000000                          ?_setupSettings 0001  
                          ___aldiv@sign 0089              Button_initButton@onPressed 0083  
               __end_of_USARTReadString 0E1A                  __end_of_calculateSpbrg 108A  
                      _USARTWriteString 1336                  calculateSpbrg@baudRate 008E  
                   _initInputController 0CFE                          _USARTWriteByte 1538  
                        _USARTWriteLine 149E                           _USARTWriteInt 0740  
